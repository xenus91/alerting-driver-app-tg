import { NextResponse } from "next/server"
import { getAppUrl } from "@/lib/app-config"

export async function GET() {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

    if (!TELEGRAM_BOT_TOKEN) {
      return NextResponse.json({
        success: false,
        error: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        steps: [
          "1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather",
          "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot",
          "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞",
          "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
          "5. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel",
        ],
        example_token: "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz",
      })
    }

    const appUrl = getAppUrl()
    const expectedWebhookUrl = `${appUrl}/api/telegram-webhook`
    const isLocalDevelopment = process.env.NODE_ENV === "development"
    const isLiteEnvironment = appUrl.includes("lite.vusercontent.net")
    const isVercelDeployment = !!process.env.VERCEL_URL

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook health endpoint
    let webhookAccessible = false
    let healthCheckError = null

    try {
      const healthUrl = `${appUrl}/api/telegram-webhook`
      const testResponse = await fetch(healthUrl, {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      })
      webhookAccessible = testResponse.ok

      if (!testResponse.ok) {
        healthCheckError = `HTTP ${testResponse.status}: ${testResponse.statusText}`

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π webhook endpoint
        try {
          const webhookResponse = await fetch(expectedWebhookUrl, {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
          })
          if (webhookResponse.ok) {
            webhookAccessible = true
            healthCheckError = null
          }
        } catch (webhookError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç health check
        }
      }
    } catch (error) {
      webhookAccessible = false
      healthCheckError = error instanceof Error ? error.message : "Network error"

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π webhook endpoint –∫–∞–∫ fallback
      try {
        const webhookResponse = await fetch(expectedWebhookUrl, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        })
        if (webhookResponse.ok) {
          webhookAccessible = true
          healthCheckError = "Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
      } catch (webhookError) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook –≤ Telegram
    let currentTelegramWebhook = null
    let telegramWebhookError = null

    try {
      const webhookResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`)
      const webhookData = await webhookResponse.json()

      if (webhookData.ok) {
        currentTelegramWebhook = webhookData.result
      } else {
        telegramWebhookError = webhookData.description
      }
    } catch (error) {
      telegramWebhookError = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"
    }

    const recommendations = []

    if (isLiteEnvironment) {
      recommendations.push("‚ùå Lite environment –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram webhook")
      recommendations.push("üí° –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Vercel")
    } else if (isLocalDevelopment) {
      recommendations.push("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Telegram")
      recommendations.push("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    } else if (!isVercelDeployment) {
      recommendations.push("‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel")
      recommendations.push("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VERCEL_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    } else if (!webhookAccessible) {
      recommendations.push("‚ùå Webhook URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
      recommendations.push("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
      if (healthCheckError) {
        recommendations.push(`üîß –û—à–∏–±–∫–∞: ${healthCheckError}`)
      }
    } else if (currentTelegramWebhook?.url !== expectedWebhookUrl) {
      recommendations.push("‚ö†Ô∏è Webhook –≤ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
      recommendations.push("üîß –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    } else {
      recommendations.push("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Vercel")
      recommendations.push("‚úÖ Webhook URL –¥–æ—Å—Ç—É–ø–µ–Ω")
      recommendations.push("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
      recommendations.push("üí° –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    }

    return NextResponse.json({
      success: true,
      token_configured: true,
      token_format_valid: TELEGRAM_BOT_TOKEN.includes(":") && TELEGRAM_BOT_TOKEN.length > 20,
      webhook_accessible: webhookAccessible,
      is_lite_environment: isLiteEnvironment,
      is_local_development: isLocalDevelopment,
      is_vercel_deployment: isVercelDeployment,
      health_check_error: healthCheckError,
      telegram_webhook_error: telegramWebhookError,
      current_telegram_webhook: currentTelegramWebhook,
      environment: {
        app_url: appUrl,
        expected_webhook_url: expectedWebhookUrl,
        node_env: process.env.NODE_ENV,
        vercel_url: process.env.VERCEL_URL || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        nextauth_url: process.env.NEXTAUTH_URL || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      },
      recommendations,
    })
  } catch (error) {
    console.error("Bot diagnostics error:", error)
    return NextResponse.json({
      success: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –±–æ—Ç–∞",
      details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    })
  }
}
