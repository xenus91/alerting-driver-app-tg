import { type NextRequest, NextResponse } from "next/server"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const BOT_USERNAME = process.env.NEXT_PUBLIC_BOT_USERNAME

export async function POST(request: NextRequest) {
  if (!TELEGRAM_BOT_TOKEN) {
    return NextResponse.json({ success: false, error: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }, { status: 500 })
  }

  try {
    const { action, description, shortDescription } = await request.json()

    if (action === "setDescription") {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
      const descriptionResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setMyDescription`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          description:
            description ||
            `üöó –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞–º–∏ –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–π—Å–∞—Ö
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ä–µ–π—Å—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤–æ–¥–∏—Ç–µ–ª—è
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.`,
          language_code: "ru",
        }),
      })

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      const shortDescResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setMyShortDescription`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          short_description: shortDescription || "üöó –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞–º–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π",
          language_code: "ru",
        }),
      })

      const descResult = await descriptionResponse.json()
      const shortResult = await shortDescResponse.json()

      if (descResult.ok && shortResult.ok) {
        return NextResponse.json({
          success: true,
          message: "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
          description: descResult,
          shortDescription: shortResult,
        })
      } else {
        return NextResponse.json({
          success: false,
          error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è",
          details: { descResult, shortResult },
        })
      }
    }

    if (action === "setCommands") {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      const commandsResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setMyCommands`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          commands: [
            {
              command: "start",
              description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            },
            {
              command: "help",
              description: "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
            },
            {
              command: "status",
              description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            },
          ],
          language_code: "ru",
        }),
      })

      const commandsResult = await commandsResponse.json()

      if (commandsResult.ok) {
        return NextResponse.json({
          success: true,
          message: "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
          commands: commandsResult,
        })
      } else {
        return NextResponse.json({
          success: false,
          error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥",
          details: commandsResult,
        })
      }
    }

    return NextResponse.json({ success: false, error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", error)
    return NextResponse.json(
      {
        success: false,
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  if (!TELEGRAM_BOT_TOKEN) {
    return NextResponse.json({ success: false, error: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }, { status: 500 })
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfoResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`)
    const botInfo = await botInfoResponse.json()

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    const commandsResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMyCommands`)
    const commands = await commandsResponse.json()

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö API)
    let description = null
    try {
      const descResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMyDescription`)
      description = await descResponse.json()
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    }

    return NextResponse.json({
      success: true,
      botInfo: botInfo.result,
      commands: commands.result,
      description: description?.result,
      botUsername: BOT_USERNAME,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:", error)
    return NextResponse.json(
      {
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ",
      },
      { status: 500 },
    )
  }
}
