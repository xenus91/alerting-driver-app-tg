import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"
import { sendMessage } from "@/lib/telegram"

const sql = neon(process.env.DATABASE_URL!)

export async function POST(request: NextRequest) {
  try {
    console.log("=== CHECKING SUBSCRIPTIONS ===")

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    const subscriptions = await sql`
      SELECT 
        ts.*,
        t.status as trip_status,
        COUNT(tm.id) as total_messages,
        COUNT(CASE WHEN tm.status = 'sent' THEN 1 END) as sent_messages,
        COUNT(CASE WHEN tm.response_status = 'confirmed' THEN 1 END) as confirmed_responses,
        COUNT(CASE WHEN tm.response_status = 'rejected' THEN 1 END) as rejected_responses,
        COUNT(CASE WHEN tm.response_status = 'pending' AND tm.status = 'sent' THEN 1 END) as pending_responses
      FROM trip_subscriptions ts
      JOIN trips t ON ts.trip_id = t.id
      LEFT JOIN trip_messages tm ON t.id = tm.trip_id
      WHERE ts.is_active = true
        AND t.status != 'completed'
        AND (
          ts.last_notification_at IS NULL 
          OR ts.last_notification_at < NOW() - INTERVAL '1 minute' * ts.interval_minutes
        )
      GROUP BY ts.id, t.id, t.status
    `

    console.log(`Found ${subscriptions.length} subscriptions to check`)

    let notificationsSent = 0

    for (const subscription of subscriptions) {
      try {
        const totalMessages = Number(subscription.total_messages)
        const sentMessages = Number(subscription.sent_messages)
        const confirmedResponses = Number(subscription.confirmed_responses)
        const rejectedResponses = Number(subscription.rejected_responses)
        const pendingResponses = Number(subscription.pending_responses)

        const totalResponses = confirmedResponses + rejectedResponses
        const responsePercentage = sentMessages > 0 ? Math.round((totalResponses / sentMessages) * 100) : 0

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        let message = `üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ #${subscription.trip_id}</b>\n\n`

        message += `üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> ${sentMessages}/${totalMessages} (${sentMessages > 0 ? Math.round((sentMessages / totalMessages) * 100) : 0}%)\n`
        message += `üì• <b>–û—Ç–≤–µ—Ç—ã:</b> ${totalResponses}/${sentMessages} (${responsePercentage}%)\n\n`

        message += `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${confirmedResponses}\n`
        message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedResponses}\n`
        message += `‚è≥ –û–∂–∏–¥–∞—é—Ç: ${pendingResponses}\n\n`

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (totalResponses === sentMessages && sentMessages === totalMessages) {
          message += `üéâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>`

          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
          await sql`
            UPDATE trip_subscriptions 
            SET is_active = false
            WHERE id = ${subscription.id}
          `

          await sql`
            UPDATE trips 
            SET status = 'completed'
            WHERE id = ${subscription.trip_id}
          `
        } else if (sentMessages < totalMessages) {
          message += `üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...`
        } else {
          message += `‚è∞ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π...`
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await sendMessage(subscription.user_telegram_id, message)

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await sql`
          UPDATE trip_subscriptions 
          SET last_notification_at = CURRENT_TIMESTAMP
          WHERE id = ${subscription.id}
        `

        notificationsSent++
        console.log(`Sent notification for subscription ${subscription.id} to user ${subscription.user_telegram_id}`)
      } catch (error) {
        console.error(`Error processing subscription ${subscription.id}:`, error)
      }
    }

    console.log(`=== SUBSCRIPTIONS CHECK COMPLETED: ${notificationsSent} notifications sent ===`)

    return NextResponse.json({
      success: true,
      checked: subscriptions.length,
      sent: notificationsSent,
    })
  } catch (error) {
    console.error("Error checking subscriptions:", error)
    return NextResponse.json({ success: false, error: "Failed to check subscriptions" }, { status: 500 })
  }
}
