import { NextResponse } from "next/server"

export async function GET() {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

    if (!TELEGRAM_BOT_TOKEN) {
      return NextResponse.json(
        {
          error: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
        },
        { status: 400 },
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    const webhookResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`)
    const webhookData = await webhookResponse.json()

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`)
    const botData = await botResponse.json()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à URL
    const appUrl = process.env.VERCEL_URL
      ? `https://${process.env.VERCEL_URL}`
      : process.env.NEXTAUTH_URL || "http://localhost:3000"

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞—à–∏—Ö endpoints
    const testEndpoints = [
      `${appUrl}/api/test-webhook-access`,
      `${appUrl}/api/webhook-debug`,
      `${appUrl}/webhook/telegram`,
    ]

    const endpointTests = []
    for (const endpoint of testEndpoints) {
      try {
        const testResponse = await fetch(endpoint, {
          method: "GET",
          headers: {
            "User-Agent": "TelegramBot/1.0",
          },
        })
        endpointTests.push({
          url: endpoint,
          status: testResponse.status,
          accessible: testResponse.ok,
          response: testResponse.ok ? await testResponse.text() : `HTTP ${testResponse.status}`,
        })
      } catch (error) {
        endpointTests.push({
          url: endpoint,
          status: 0,
          accessible: false,
          error: error instanceof Error ? error.message : "Network error",
        })
      }
    }

    return NextResponse.json({
      success: true,
      app_url: appUrl,
      bot_info: botData.ok ? botData.result : { error: botData.description },
      webhook_info: webhookData.ok ? webhookData.result : { error: webhookData.description },
      endpoint_tests: endpointTests,
      recommendations: generateRecommendations(webhookData.result, endpointTests, appUrl),
    })
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}

function generateRecommendations(webhookInfo: any, endpointTests: any[], appUrl: string) {
  const recommendations = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoints
  const accessibleEndpoints = endpointTests.filter((test) => test.accessible)
  if (accessibleEndpoints.length === 0) {
    recommendations.push("‚ùå –ù–ò –û–î–ò–ù endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ DNS")
    recommendations.push("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    recommendations.push("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
  } else if (accessibleEndpoints.length < endpointTests.length) {
    recommendations.push("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
  } else {
    recommendations.push("‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã")
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook URL
  if (webhookInfo?.url) {
    const expectedUrls = [`${appUrl}/api/webhook-debug`, `${appUrl}/webhook/telegram`, `${appUrl}/api/telegram-webhook`]

    if (!expectedUrls.includes(webhookInfo.url)) {
      recommendations.push(`‚ö†Ô∏è Webhook URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: ${webhookInfo.url}`)
      recommendations.push("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–∞–±–æ—á–∏—Ö endpoints")
    } else {
      recommendations.push("‚úÖ Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    }
  } else {
    recommendations.push("‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram")
    recommendations.push("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook —á–µ—Ä–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending updates
  if (webhookInfo?.pending_update_count > 0) {
    recommendations.push(`‚ö†Ô∏è ${webhookInfo.pending_update_count} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`)
    recommendations.push("üîß –û—á–∏—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ '–û—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'")
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowed_updates
  if (webhookInfo?.allowed_updates && !webhookInfo.allowed_updates.includes("callback_query")) {
    recommendations.push("‚ùå callback_query –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ allowed_updates")
    recommendations.push("üîß –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ allowed_updates")
  }

  return recommendations
}
