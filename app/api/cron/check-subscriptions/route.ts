import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"
import { sendMessage } from "@/lib/telegram"

const sql = neon(process.env.DATABASE_URL!)

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const authHeader = request.headers.get("authorization")
    const cronSecret = process.env.CRON_SECRET_KEY

    if (!cronSecret) {
      console.error("CRON_SECRET_KEY not configured")
      return NextResponse.json({ success: false, error: "Cron secret not configured" }, { status: 500 })
    }

    if (!authHeader || authHeader !== `Bearer ${cronSecret}`) {
      console.error("Unauthorized cron request")
      return NextResponse.json({ success: false, error: "Unauthorized" }, { status: 401 })
    }

    console.log("=== CRON: CHECKING SUBSCRIPTIONS ===")

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    const subscriptions = await sql`
      SELECT 
        ts.*,
        t.status as trip_status,
        t.created_at as trip_created_at,
        COUNT(tm.id) as total_messages,
        COUNT(CASE WHEN tm.status = 'sent' THEN 1 END) as sent_messages,
        COUNT(CASE WHEN tm.status = 'error' THEN 1 END) as error_messages,
        COUNT(CASE WHEN tm.response_status = 'confirmed' THEN 1 END) as confirmed_responses,
        COUNT(CASE WHEN tm.response_status = 'rejected' THEN 1 END) as rejected_responses,
        COUNT(CASE WHEN tm.response_status = 'pending' AND tm.status = 'sent' THEN 1 END) as pending_responses
      FROM trip_subscriptions ts
      JOIN trips t ON ts.trip_id = t.id
      LEFT JOIN trip_messages tm ON t.id = tm.trip_id
      WHERE ts.is_active = true
        AND t.status != 'completed'
        AND (
          ts.last_notification_at IS NULL 
          OR ts.last_notification_at < NOW() - INTERVAL '1 minute' * ts.interval_minutes
        )
      GROUP BY ts.id, t.id, t.status, t.created_at
    `

    console.log(`CRON: Found ${subscriptions.length} subscriptions to check`)

    let notificationsSent = 0
    let subscriptionsCompleted = 0

    for (const subscription of subscriptions) {
      try {
        const totalMessages = Number(subscription.total_messages)
        const sentMessages = Number(subscription.sent_messages)
        const errorMessages = Number(subscription.error_messages)
        const confirmedResponses = Number(subscription.confirmed_responses)
        const rejectedResponses = Number(subscription.rejected_responses)
        const pendingResponses = Number(subscription.pending_responses)

        const totalResponses = confirmedResponses + rejectedResponses
        const responsePercentage = sentMessages > 0 ? Math.round((totalResponses / sentMessages) * 100) : 0
        const sentPercentage = totalMessages > 0 ? Math.round((sentMessages / totalMessages) * 100) : 0

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        let message = `üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ #${subscription.trip_id}</b>\n\n`

        message += `üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞:</b> ${sentMessages}/${totalMessages} (${sentPercentage}%)\n`
        message += `üì• <b>–û—Ç–≤–µ—Ç—ã:</b> ${totalResponses}/${sentMessages} (${responsePercentage}%)\n\n`

        message += `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${confirmedResponses}\n`
        message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedResponses}\n`
        message += `‚è≥ –û–∂–∏–¥–∞—é—Ç: ${pendingResponses}\n`

        if (errorMessages > 0) {
          message += `üö´ –û—à–∏–±–∫–∏: ${errorMessages}\n`
        }

        message += `\n`

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ª–∏ –ø–æ–¥–ø–∏—Å–∫—É
        let shouldCompleteSubscription = false

        if (totalResponses === sentMessages && sentMessages === totalMessages && totalMessages > 0) {
          message += `üéâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n`
          message += `–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.`
          shouldCompleteSubscription = true
        } else if (sentMessages < totalMessages) {
          message += `üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...`
        } else if (pendingResponses > 0) {
          message += `‚è∞ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç ${pendingResponses} –≤–æ–¥–∏—Ç–µ–ª–µ–π...`
        } else {
          message += `üìã –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω`
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const telegramResult = await sendMessage(subscription.user_telegram_id, message)

        if (telegramResult.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await sql`
            UPDATE trip_subscriptions 
            SET last_notification_at = CURRENT_TIMESTAMP
            WHERE id = ${subscription.id}
          `

          notificationsSent++
          console.log(
            `CRON: Sent notification for subscription ${subscription.id} to user ${subscription.user_telegram_id}`,
          )

          // –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          if (shouldCompleteSubscription) {
            await sql`
              DELETE FROM trip_subscriptions 
              WHERE id = ${subscription.id}
            `

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            await sql`
              UPDATE trips 
              SET status = 'completed'
              WHERE id = ${subscription.trip_id}
            `

            subscriptionsCompleted++
            console.log(`CRON: Completed and removed subscription ${subscription.id}`)
          }
        } else {
          console.error(`CRON: Failed to send notification for subscription ${subscription.id}:`, telegramResult.error)
        }
      } catch (error) {
        console.error(`CRON: Error processing subscription ${subscription.id}:`, error)
      }
    }

    console.log(
      `=== CRON: COMPLETED - ${notificationsSent} notifications sent, ${subscriptionsCompleted} subscriptions completed ===`,
    )

    return NextResponse.json({
      success: true,
      checked: subscriptions.length,
      sent: notificationsSent,
      completed: subscriptionsCompleted,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("CRON: Error checking subscriptions:", error)
    return NextResponse.json({ success: false, error: "Failed to check subscriptions" }, { status: 500 })
  }
}

// –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º GET –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function GET(request: NextRequest) {
  const authHeader = request.headers.get("authorization")
  const cronSecret = process.env.CRON_SECRET_KEY

  if (!cronSecret) {
    return NextResponse.json({ success: false, error: "Cron secret not configured" }, { status: 500 })
  }

  if (!authHeader || authHeader !== `Bearer ${cronSecret}`) {
    return NextResponse.json({ success: false, error: "Unauthorized" }, { status: 401 })
  }

  return NextResponse.json({
    success: true,
    message: "Cron endpoint is working",
    timestamp: new Date().toISOString(),
  })
}
