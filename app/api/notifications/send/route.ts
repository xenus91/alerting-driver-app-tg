import { type NextRequest, NextResponse } from "next/server"
import { getSubscriptionsDueForNotification, updateSubscriptionLastNotification } from "@/lib/database"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

async function sendTelegramMessage(chatId: number, message: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()
    if (!data.ok) {
      throw new Error(`Telegram API error: ${data.description}`)
    }

    return data
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

function formatNotificationMessage(subscription: any) {
  const confirmedNum = Number(subscription.confirmed_responses)
  const rejectedNum = Number(subscription.rejected_responses)
  const pendingNum = Number(subscription.pending_responses)
  const sentNum = Number(subscription.sent_messages)

  const responsePercentage = sentNum > 0 ? Math.round(((confirmedNum + rejectedNum) / sentNum) * 100) : 0

  const userName = subscription.full_name || subscription.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

  return `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ #${subscription.trip_id}</b>

üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!

üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentNum} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ‚úÖ ${confirmedNum}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ‚ùå ${rejectedNum}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: ‚è≥ ${pendingNum}

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–≤–µ—Ç–æ–≤:</b> ${responsePercentage}%

‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${subscription.interval_minutes} –º–∏–Ω.

<i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</i>`
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîî Starting manual notification check...")

    const subscriptions = await getSubscriptionsDueForNotification()
    console.log(`Found ${subscriptions.length} subscriptions due for notification`)

    let sentCount = 0
    let errorCount = 0

    for (const subscription of subscriptions) {
      try {
        const message = formatNotificationMessage(subscription)

        console.log(`Sending notification to user ${subscription.telegram_id} for trip ${subscription.trip_id}`)

        await sendTelegramMessage(subscription.telegram_id, message)
        await updateSubscriptionLastNotification(subscription.id)

        sentCount++
        console.log(`‚úÖ Notification sent successfully`)

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 100))
      } catch (error) {
        console.error(`‚ùå Error sending notification to user ${subscription.telegram_id}:`, error)
        errorCount++
      }
    }

    console.log(`üîî Notification check completed: ${sentCount} sent, ${errorCount} errors`)

    return NextResponse.json({
      success: true,
      sent: sentCount,
      errors: errorCount,
      total: subscriptions.length,
      message: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—à–∏–±–æ–∫: ${errorCount}`,
    })
  } catch (error) {
    console.error("Error in notification job:", error)
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 })
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ GET –∑–∞–ø—Ä–æ—Å–µ (–¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const lastCheck = request.headers.get("x-last-check")
    const now = Date.now()

    if (lastCheck && now - Number.parseInt(lastCheck) < 60000) {
      // –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      return NextResponse.json({ success: true, message: "Too soon for next check" })
    }

    const subscriptions = await getSubscriptionsDueForNotification()

    if (subscriptions.length === 0) {
      return NextResponse.json({ success: true, message: "No notifications due" })
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    return POST(request)
  } catch (error) {
    console.error("Error in background notification check:", error)
    return NextResponse.json({ success: false, error: "Internal server error" }, { status: 500 })
  }
}
