import { type NextRequest, NextResponse } from "next/server"
import { getTrips, getTripDataGroupedByPhone } from "@/lib/database"
import { sendMultipleTripMessageWithButtons } from "@/lib/telegram"

export async function POST(request: NextRequest) {
  try {
    const { campaignId } = await request.json()
    console.log(`=== SEND MESSAGES API CALLED ===`)
    console.log(`Received campaignId: ${campaignId}`)

    if (!campaignId) {
      return NextResponse.json({ error: "ID –∫–∞–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 })
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω "latest", –Ω–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–π—Å
    let actualTripId = campaignId
    if (campaignId === "latest") {
      const allTrips = await getTrips()
      if (allTrips.length === 0) {
        return NextResponse.json({ error: "–ù–µ—Ç —Ä–µ–π—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏" }, { status: 400 })
      }
      actualTripId = allTrips[0].id
      console.log(`Using latest trip ID: ${actualTripId}`)
    }

    console.log(`Processing trip ID: ${actualTripId}`)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    function formatDateTime(dateTimeString: string): string {
      try {
        if (!dateTimeString) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        const date = new Date(dateTimeString)
        if (isNaN(date.getTime())) return dateTimeString

        const day = date.getDate()
        const monthNames = [
          "—è–Ω–≤–∞—Ä—è",
          "—Ñ–µ–≤—Ä–∞–ª—è",
          "–º–∞—Ä—Ç–∞",
          "–∞–ø—Ä–µ–ª—è",
          "–º–∞—è",
          "–∏—é–Ω—è",
          "–∏—é–ª—è",
          "–∞–≤–≥—É—Å—Ç–∞",
          "—Å–µ–Ω—Ç—è–±—Ä—è",
          "–æ–∫—Ç—è–±—Ä—è",
          "–Ω–æ—è–±—Ä—è",
          "–¥–µ–∫–∞–±—Ä—è",
        ]
        const month = monthNames[date.getMonth()]
        const time = date.toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
          timeZone: "Europe/Moscow",
        })
        return `${day} ${month} ${time}`
      } catch (error) {
        console.error("Error formatting date:", error)
        return dateTimeString
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –¥–≤–µ—Ä–µ–π
    function formatDoorTimes(door1?: string, door2?: string, door3?: string): string {
      const times = [door1, door2, door3].filter(Boolean)
      return times.length > 0 ? times.join(" | ") : ""
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const groupedData = await getTripDataGroupedByPhone(actualTripId)
    console.log(`Found ${groupedData.size} phone groups`)

    if (groupedData.size === 0) {
      return NextResponse.json({ error: "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏" }, { status: 400 })
    }

    const results = {
      total: 0,
      sent: 0,
      errors: 0,
      details: [] as any[],
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    for (const [phone, phoneData] of groupedData) {
      try {
        console.log(`=== PROCESSING PHONE ${phone} ===`)

        const firstName = phoneData.first_name || phoneData.full_name || "–í–æ–¥–∏—Ç–µ–ª—å"

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ trip_identifier
        const sortedTrips = Array.from(phoneData.trips.entries())
          .sort(([_, tripA], [__, tripB]) => {
            const timeA = new Date(tripA.planned_loading_time || "").getTime()
            const timeB = new Date(tripB.planned_loading_time || "").getTime()
            return timeA - timeB
          })
          .map(([_, trip]) => trip)

        console.log(`Found ${sortedTrips.length} trips for phone ${phone}`)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n\nüë§ –£–≤–∞–∂–∞–µ–º—ã–π, ${firstName}\n\nüöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–π—Å—ã\n`

        for (let i = 0; i < sortedTrips.length; i++) {
          const trip = sortedTrips[i]

          message += `${trip.trip_identifier}\n`
          message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${trip.vehicle_number || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n`
          message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: ${formatDateTime(trip.planned_loading_time || "")}\n`

          // –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
          if (trip.loading_points.length > 0) {
            message += `üì¶ –ü–æ–≥—Ä—É–∑–∫–∞:\n`
            trip.loading_points
              .sort((a, b) => (a.point_num || 0) - (b.point_num || 0))
              .forEach((point, index) => {
                message += `${index + 1}) ${point.point_name}\n`
              })
          }

          // –ü—É–Ω–∫—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞
          if (trip.unloading_points.length > 0) {
            message += `\nüì§ –†–∞–∑–≥—Ä—É–∑–∫–∞:\n`
            trip.unloading_points
              .sort((a, b) => (a.point_num || 0) - (b.point_num || 0))
              .forEach((point, index) => {
                message += `${index + 1}) ${point.point_name}`
                const doorTimes = formatDoorTimes(point.door_open_1, point.door_open_2, point.door_open_3)
                if (doorTimes) {
                  message += `\n   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: ${doorTimes}`
                }
                message += `\n`
              })
          }

          // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ–π—Å—É
          if (trip.driver_comment) {
            message += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:\n${trip.driver_comment}\n`
          }

          // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
          if (i < sortedTrips.length - 1) {
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`
          }
        }

        message += `\nüôè –ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å—ã`

        console.log(`Sending message to ${phone}`)
        console.log(`Message preview: ${message.substring(0, 300)}...`)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const telegramResult = await sendMultipleTripMessageWithButtons(
          phoneData.telegram_id,
          sortedTrips,
          firstName,
          1, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è callback
        )

        console.log(`Telegram API result:`, telegramResult)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        results.sent++
        results.details.push({
          phone: phone,
          status: "sent",
          user_name: firstName,
          trips_count: sortedTrips.length,
          telegram_message_id: telegramResult.message_id,
        })

        console.log(`Messages sent successfully to ${phone}`)
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        console.error(`Error sending messages to ${phone}:`, errorMessage)

        results.errors++
        results.details.push({
          phone: phone,
          status: "error",
          error: errorMessage,
        })
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 100))
    }

    results.total = results.sent + results.errors

    console.log(`=== MESSAGE SENDING COMPLETE ===`)
    console.log(`Sent: ${results.sent}, Errors: ${results.errors}`)

    return NextResponse.json({
      success: true,
      results: results,
    })
  } catch (error) {
    console.error("Send messages error:", error)
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 },
    )
  }
}
