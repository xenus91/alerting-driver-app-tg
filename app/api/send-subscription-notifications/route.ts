import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

interface TripStats {
  trip_id: number
  total_messages: number
  sent_messages: number
  confirmed_responses: number
  rejected_responses: number
  pending_responses: number
  response_percentage: number
}

async function getTripStats(tripId: number): Promise<TripStats | null> {
  try {
    const result = await sql`
      SELECT 
        t.id as trip_id,
        COUNT(tm.id) as total_messages,
        COUNT(CASE WHEN tm.status = 'sent' THEN 1 END) as sent_messages,
        COUNT(CASE WHEN tm.response_status = 'confirmed' THEN 1 END) as confirmed_responses,
        COUNT(CASE WHEN tm.response_status = 'rejected' THEN 1 END) as rejected_responses,
        COUNT(CASE WHEN tm.response_status = 'pending' AND tm.status = 'sent' THEN 1 END) as pending_responses
      FROM trips t
      LEFT JOIN trip_messages tm ON t.id = tm.trip_id
      WHERE t.id = ${tripId}
      GROUP BY t.id
    `

    if (result.length === 0) return null

    const stats = result[0]
    const sentNum = Number(stats.sent_messages)
    const confirmedNum = Number(stats.confirmed_responses)
    const rejectedNum = Number(stats.rejected_responses)

    const responsePercentage =
      sentNum > 0 ? Math.min(Math.round(((confirmedNum + rejectedNum) / sentNum) * 100), 100) : 0

    return {
      trip_id: tripId,
      total_messages: Number(stats.total_messages),
      sent_messages: sentNum,
      confirmed_responses: confirmedNum,
      rejected_responses: rejectedNum,
      pending_responses: Number(stats.pending_responses),
      response_percentage: responsePercentage,
    }
  } catch (error) {
    console.error("Error getting trip stats:", error)
    return null
  }
}

async function sendTelegramNotification(telegramId: number, message: string) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    if (!botToken) {
      throw new Error("TELEGRAM_BOT_TOKEN not configured")
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()
    if (!data.ok) {
      throw new Error(`Telegram API error: ${data.description}`)
    }

    return true
  } catch (error) {
    console.error("Error sending telegram notification:", error)
    return false
  }
}

function formatNotificationMessage(stats: TripStats): string {
  const { trip_id, sent_messages, confirmed_responses, rejected_responses, pending_responses, response_percentage } =
    stats

  let statusEmoji = "‚è≥"
  let statusText = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"

  if (pending_responses === 0 && sent_messages > 0) {
    statusEmoji = "‚úÖ"
    statusText = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  } else if (response_percentage >= 80) {
    statusEmoji = "üî•"
    statusText = "–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞"
  } else if (response_percentage >= 50) {
    statusEmoji = "üìà"
    statusText = "–∞–∫—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—á–∞—é—Ç"
  }

  return `
${statusEmoji} <b>–†–∞—Å—Å—ã–ª–∫–∞ #${trip_id}</b> - ${statusText}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent_messages} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>${response_percentage}%</b> (${confirmed_responses + rejected_responses}/${sent_messages})

‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏: <b>${confirmed_responses}</b>
‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª–∏: <b>${rejected_responses}</b>
‚è≥ –û–∂–∏–¥–∞—é—Ç: <b>${pending_responses}</b>

${
  pending_responses === 0 && sent_messages > 0
    ? "üéâ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
    : "üì± –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª."
}
  `.trim()
}

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    const subscriptions = await sql`
      SELECT 
        ts.*,
        u.telegram_id,
        u.first_name,
        u.full_name
      FROM trip_subscriptions ts
      JOIN users u ON ts.user_id = u.id
      WHERE ts.is_active = true
        AND u.telegram_id IS NOT NULL
        AND (
          ts.last_sent_at IS NULL 
          OR ts.last_sent_at < NOW() - INTERVAL '1 minute' * ts.interval_minutes
        )
    `

    console.log(`Found ${subscriptions.length} subscriptions to process`)

    let processedCount = 0
    let errorCount = 0

    for (const subscription of subscriptions) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        const stats = await getTripStats(subscription.trip_id)
        if (!stats) {
          console.log(`Trip ${subscription.trip_id} not found, skipping`)
          continue
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
        const isCompleted = stats.pending_responses === 0 && stats.sent_messages > 0

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = formatNotificationMessage(stats)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const sent = await sendTelegramNotification(subscription.telegram_id, message)

        if (sent) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
          await sql`
            UPDATE trip_subscriptions 
            SET last_sent_at = CURRENT_TIMESTAMP,
                is_active = ${!isCompleted},
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ${subscription.id}
          `

          processedCount++
          console.log(`Sent notification for trip ${subscription.trip_id} to user ${subscription.telegram_id}`)

          if (isCompleted) {
            console.log(`Trip ${subscription.trip_id} completed, subscription deactivated`)
          }
        } else {
          errorCount++
          console.log(`Failed to send notification for trip ${subscription.trip_id}`)
        }
      } catch (error) {
        console.error(`Error processing subscription ${subscription.id}:`, error)
        errorCount++
      }
    }

    return NextResponse.json({
      success: true,
      processed: processedCount,
      errors: errorCount,
      total: subscriptions.length,
    })
  } catch (error) {
    console.error("Error sending subscription notifications:", error)
    return NextResponse.json({ success: false, error: "Failed to send notifications" }, { status: 500 })
  }
}

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å GET
export async function GET(request: NextRequest) {
  return POST(request)
}
