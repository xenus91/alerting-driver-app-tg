import { NextResponse } from "next/server"
import { setTelegramCommands, deleteTelegramCommands } from "@/lib/telegram-commands"

export async function POST(request: Request) {
  try {
    const body = await request.json().catch(() => ({}))
    const forceUpdate = body.force || false

    if (forceUpdate) {
      console.log("üîÑ Force update requested - deleting all commands first")
      await deleteTelegramCommands()
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise((resolve) => setTimeout(resolve, 1000))
    }

    const result = await setTelegramCommands()

    return NextResponse.json({
      success: true,
      message: "Telegram bot commands set successfully",
      result: result,
      force_update: forceUpdate,
    })
  } catch (error) {
    console.error("Error setting Telegram commands:", error)

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: "Use POST to set Telegram bot commands",
    options: {
      force: "Set to true to delete all commands first",
    },
    commands: [
      { command: "start", description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
      { command: "toroute", description: "üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏" },
      { command: "status", description: "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" },
      { command: "help", description: "‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É" },
    ],
  })
}
