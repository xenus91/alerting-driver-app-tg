import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

interface TelegramMessage {
  message_id: number
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  chat: {
    id: number
    type: string
  }
  text?: string
  contact?: {
    phone_number: string
    first_name: string
    last_name?: string
  }
}

interface TelegramCallbackQuery {
  id: string
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  message?: TelegramMessage
  data?: string
}

interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–ª–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendReplyToMessage(chatId: number, replyToMessageId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      reply_to_message_id: replyToMessageId
    }

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send reply message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending reply message:", error)
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–ª–∞–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendMessage(chatId, text)
    throw error
  }
}

async function sendMessage(chatId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

async function sendMessageWithButtons(
  chatId: number,
  text: string,
  buttons: Array<Array<{ text: string; callback_data: string }>>,
) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== SENDING MESSAGE WITH BUTTONS ===")
  console.log("Chat ID:", chatId)
  console.log("Text:", text)
  console.log("Buttons:", JSON.stringify(buttons, null, 2))

  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: buttons,
      },
    }

    console.log("Full payload:", JSON.stringify(payload, null, 2))

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()
    console.log("Telegram API response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message with buttons")
    }

    console.log("=== BUTTONS MESSAGE SENT SUCCESSFULLY ===")
    return data.result
  } catch (error) {
    console.error("Error sending Telegram message with buttons:", error)
    throw error
  }
}

async function editMessageReplyMarkup(chatId: number, messageId: number, replyMarkup?: any) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== EDITING MESSAGE REPLY MARKUP ===")
  console.log("Chat ID:", chatId)
  console.log("Message ID:", messageId)
  console.log("New reply markup:", JSON.stringify(replyMarkup, null, 2))

  try {
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: replyMarkup,
    }

    const response = await fetch(`${TELEGRAM_API_URL}/editMessageReplyMarkup`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()
    console.log("editMessageReplyMarkup response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      console.error("Failed to edit message reply markup:", data.description)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      return null
    }

    console.log("=== MESSAGE REPLY MARKUP EDITED SUCCESSFULLY ===")
    return data.result
  } catch (error) {
    console.error("Error editing message reply markup:", error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    return null
  }
}

async function sendContactRequest(chatId: number) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup: {
          keyboard: [
            [
              {
                text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
                request_contact: true,
              },
            ],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send contact request")
    }

    return data.result
  } catch (error) {
    console.error("Error sending contact request:", error)
    throw error
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== ANSWERING CALLBACK QUERY ===")
  console.log("Callback Query ID:", callbackQueryId)
  console.log("Answer text:", text)

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false,
      }),
    })

    const data = await response.json()
    console.log("answerCallbackQuery response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      console.error("Failed to answer callback query:", data.description)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback query
      return null
    }

    console.log("=== CALLBACK QUERY ANSWERED ===")
    return data.result
  } catch (error) {
    console.error("Error answering callback query:", error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback query
    return null
  }
}

async function createUser(telegramId: number, phone: string, name: string) {
  try {
    const normalizedPhone = phone.startsWith("+") ? phone.slice(1) : phone

    console.log(`Creating user: telegramId=${telegramId}, phone=${normalizedPhone}, name=${name}`)

    const result = await sql`
      INSERT INTO users (telegram_id, phone, name, registration_state)
      VALUES (${telegramId}, ${normalizedPhone}, ${name}, 'awaiting_first_name')
      ON CONFLICT (telegram_id) DO UPDATE SET
        phone = EXCLUDED.phone,
        name = EXCLUDED.name,
        registration_state = 'awaiting_first_name'
      RETURNING *
    `

    console.log("User created/updated:", result[0])
    return result[0]
  } catch (error) {
    console.error("Error creating user:", error)
    throw error
  }
}

async function getUserByTelegramId(telegramId: number) {
  try {
    const result = await sql`
      SELECT * FROM users WHERE telegram_id = ${telegramId}
    `
    console.log(`User found for telegram_id ${telegramId}:`, result[0] || "not found")
    return result[0]
  } catch (error) {
    console.error("Error getting user by telegram id:", error)
    throw error
  }
}

async function updateUserRegistrationStep(telegramId: number, step: string, data?: any) {
  try {
    console.log(`Updating registration step for user ${telegramId}: ${step} = ${data}`)

    let updateQuery

    switch (step) {
      case "first_name":
        updateQuery = sql`
          UPDATE users 
          SET temp_first_name = ${data}, registration_state = 'awaiting_last_name'
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      case "last_name":
        updateQuery = sql`
          UPDATE users 
          SET temp_last_name = ${data}, registration_state = 'awaiting_carpark'
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      case "carpark":
        updateQuery = sql`
          UPDATE users 
          SET carpark = ${data}, 
              first_name = temp_first_name,
              last_name = temp_last_name,
              full_name = temp_first_name || ' ' || temp_last_name,
              registration_state = 'completed',
              temp_first_name = NULL,
              temp_last_name = NULL
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      default:
        throw new Error(`Unknown registration step: ${step}`)
    }

    const result = await updateQuery
    console.log(`User registration step updated:`, result[0])
    return result[0]
  } catch (error) {
    console.error("Error updating user registration step:", error)
    throw error
  }
}

async function setUserPendingAction(userId: number, actionType: string, relatedMessageId?: number, actionData?: any) {
  try {
    const dataString = actionData ? JSON.stringify(actionData) : null
    console.log(
      `Setting pending action for user ${userId}: ${actionType}, messageId: ${relatedMessageId}, data: ${dataString}`,
    )

    const result = await sql`
      INSERT INTO user_pending_actions (user_id, action_type, related_message_id, action_data)
      VALUES (${userId}, ${actionType}, ${relatedMessageId || null}, ${dataString})
      ON CONFLICT (user_id) DO UPDATE SET
        action_type = EXCLUDED.action_type,
        related_message_id = EXCLUDED.related_message_id,
        action_data = EXCLUDED.action_data,
        created_at = CURRENT_TIMESTAMP
      RETURNING *
    `
    console.log(`Pending action set for user ${userId}:`, result[0])
    return result[0]
  } catch (error) {
    console.error("Error setting user pending action:", error)
    throw error
  }
}

async function getUserPendingAction(userId: number) {
  try {
    const result = await sql`
      SELECT * FROM user_pending_actions WHERE user_id = ${userId}
    `
    console.log(`Pending action for user ${userId}:`, result[0] || "not found")
    return result[0]
  } catch (error) {
    console.error("Error getting user pending action:", error)
    throw error
  }
}

async function deleteUserPendingAction(userId: number) {
  try {
    await sql`
      DELETE FROM user_pending_actions WHERE user_id = ${userId}
    `
    console.log(`Pending action deleted for user ${userId}`)
  } catch (error) {
    console.error("Error deleting user pending action:", error)
    throw error
  }
}

async function getAllPoints() {
  try {
    const result = await sql`
      SELECT point_id, point_name, latitude, longitude 
      FROM points 
      WHERE latitude IS NOT NULL AND longitude IS NOT NULL
      ORDER BY point_id ASC
    `
    return result
  } catch (error) {
    console.error("Error getting all points:", error)
    throw error
  }
}

function buildRouteUrl(points: Array<{ latitude: string; longitude: string }>) {
  if (points.length < 2) {
    return null
  }

  const coordinates = points.map((p) => `${p.latitude},${p.longitude}`).join("~")

  return `https://yandex.ru/maps/?mode=routes&rtt=auto&rtext=${coordinates}&utm_source=ymaps_app_redirect`
}

export async function POST(request: NextRequest) {
  const timestamp = new Date().toISOString()
  console.log(`=== TELEGRAM WEBHOOK RECEIVED at ${timestamp} ===`)

  try {
    const update: TelegramUpdate = await request.json()
    console.log("=== FULL TELEGRAM UPDATE ===")
    console.log(JSON.stringify(update, null, 2))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫) - –ü–†–ò–û–†–ò–¢–ï–¢!
    if (update.callback_query) {
      console.log("=== PROCESSING CALLBACK QUERY ===")
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message?.chat.id
      const messageId = callbackQuery.message?.message_id
      const userId = callbackQuery.from.id
      const data = callbackQuery.data

      console.log(`Callback query from user ${userId}: ${data}`)
      console.log("Chat ID:", chatId)
      console.log("Message ID:", messageId)

      if (!chatId) {
        console.log("‚ùå No chat ID in callback query")
        return NextResponse.json({ ok: true, status: "no_chat_id" })
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (data?.startsWith("route_point_")) {
        const pointId = data.replace("route_point_", "")
        console.log(`üó∫Ô∏è User ${userId} selected route point: ${pointId}`)

        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }

          const pendingAction = await getUserPendingAction(user.id)

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
          const pointResult = await sql`
            SELECT point_id, point_name, latitude, longitude 
            FROM points 
            WHERE point_id = ${pointId}
            LIMIT 1
          `

          if (pointResult.length === 0) {
            throw new Error("Point not found")
          }

          const selectedPoint = pointResult[0]

          let routePoints = []
          let stepMessage = ""

          if (pendingAction?.action_type === "building_route_start") {
            // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
            routePoints = [selectedPoint]
            stepMessage = `‚úÖ –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>${selectedPoint.point_id} ${selectedPoint.point_name}</b>\n\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`

            await setUserPendingAction(user.id, "building_route_continue", null, { points: routePoints })
          } else if (pendingAction?.action_type === "building_route_continue") {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
            const existingData = pendingAction.action_data ? JSON.parse(pendingAction.action_data) : { points: [] }
            routePoints = [...existingData.points, selectedPoint]

            stepMessage = `üó∫Ô∏è <b>–ú–∞—Ä—à—Ä—É—Ç —Å—Ç—Ä–æ–∏—Ç—Å—è:</b>\n\n`
            routePoints.forEach((point, index) => {
              const emoji = index === 0 ? "üöÄ" : index === routePoints.length - 1 ? "üèÅ" : "üìç"
              stepMessage += `${emoji} ${index + 1}. ${point.point_id} ${point.point_name}\n`
            })

            if (routePoints.length >= 2) {
              stepMessage += `\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:`
            } else {
              stepMessage += `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:`
            }

            await setUserPendingAction(user.id, "building_route_continue", null, { points: routePoints })
          }

          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await answerCallbackQuery(callbackQuery.id, `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞: ${selectedPoint.point_name}`)

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }

          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
          const allPoints = await getAllPoints()

          // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
          const selectedPointIds = routePoints.map((p) => p.point_id)
          const availablePoints = allPoints.filter((p) => !selectedPointIds.includes(p.point_id))

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
          const buttons = []

          // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–í–ï–†–•–£
          const controlButtons = []

          // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏
          if (routePoints.length >= 2) {
            controlButtons.push({
              text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
              callback_data: "route_finish",
            })
          }

          // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
          controlButtons.push({
            text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data: "route_cancel",
          })

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
          buttons.push(controlButtons)

          // –ö–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥) –í–ù–ò–ó–£
          for (let i = 0; i < availablePoints.length; i += 2) {
            const row = []
            row.push({
              text: `${availablePoints[i].point_id} ${availablePoints[i].point_name}`,
              callback_data: `route_point_${availablePoints[i].point_id}`,
            })
            if (i + 1 < availablePoints.length) {
              row.push({
                text: `${availablePoints[i + 1].point_id} ${availablePoints[i + 1].point_name}`,
                callback_data: `route_point_${availablePoints[i + 1].point_id}`,
              })
            }
            buttons.push(row)
          }

          await sendMessageWithButtons(chatId, stepMessage, buttons)

          console.log("=== ROUTE POINT SELECTED ===")

          return NextResponse.json({
            ok: true,
            status: "route_point_selected",
            point_id: pointId,
            total_points: routePoints.length,
            timestamp: timestamp,
          })
        } catch (error) {
          console.error("Error processing route point selection:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")

          return NextResponse.json({
            ok: true,
            status: "route_point_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (data === "route_finish") {
        console.log(`üèÅ User ${userId} finishing route building`)

        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }

          const pendingAction = await getUserPendingAction(user.id)
          if (!pendingAction || pendingAction.action_type !== "building_route_continue") {
            throw new Error("No route building in progress")
          }

          const routeData = JSON.parse(pendingAction.action_data)
          const routePoints = routeData.points

          if (routePoints.length < 2) {
            throw new Error("Not enough points for route")
          }

          // –°—Ç—Ä–æ–∏–º URL –º–∞—Ä—à—Ä—É—Ç–∞
          const routeUrl = buildRouteUrl(routePoints)

          if (!routeUrl) {
            throw new Error("Failed to build route URL")
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
          let routeMessage = `üó∫Ô∏è <b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!</b>\n\n`
          routeMessage += `üìç <b>–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n`

          routePoints.forEach((point, index) => {
            const emoji = index === 0 ? "üöÄ" : index === routePoints.length - 1 ? "üèÅ" : "üìç"
            routeMessage += `${emoji} ${index + 1}. ${point.point_id} ${point.point_name}\n`
          })

          routeMessage += `\nüîó <a href="${routeUrl}">–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>`

          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await answerCallbackQuery(callbackQuery.id, "–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!")

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
          await sendMessage(chatId, routeMessage)

          // –£–¥–∞–ª—è–µ–º pending action
          await deleteUserPendingAction(user.id)

          console.log("=== ROUTE FINISHED ===")

          return NextResponse.json({
            ok: true,
            status: "route_finished",
            points_count: routePoints.length,
            route_url: routeUrl,
            timestamp: timestamp,
          })
        } catch (error) {
          console.error("Error finishing route:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")

          return NextResponse.json({
            ok: true,
            status: "route_finish_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (data === "route_cancel") {
        console.log(`‚ùå User ${userId} cancelling route building`)

        try {
          const user = await getUserByTelegramId(userId)
          if (user) {
            await deleteUserPendingAction(user.id)
          }

          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await answerCallbackQuery(callbackQuery.id, "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }

          await sendMessage(chatId, "‚ùå –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

          return NextResponse.json({
            ok: true,
            status: "route_cancelled",
            timestamp: timestamp,
          })
        } catch (error) {
          console.error("Error cancelling route:", error)
          return NextResponse.json({
            ok: true,
            status: "route_cancel_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞
      if (data?.startsWith("carpark_")) {
        const carpark = data.replace("carpark_", "")
        console.log(`üè¢ User ${userId} selected carpark: ${carpark}`)

        try {
          // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
          await answerCallbackQuery(callbackQuery.id, `–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–ø–∞—Ä–∫ ${carpark}`)

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ–º reply_markup)
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
            console.log("‚úÖ Buttons hidden after carpark selection")
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
          const user = await updateUserRegistrationStep(userId, "carpark", carpark)
          console.log("‚úÖ Registration completed for user:", user)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const completionMessage =
            `üéâ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n` +
            `üë§ –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${user.first_name}!\n\n` +
            `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +${user.phone}\n` +
            `üë§ –§–ò–û: ${user.full_name}\n` +
            `üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: ${carpark}\n\n` +
            `üöõ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–µ–π—Å–∞—Ö.\n` +
            `üìã –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n` +
            `‚Ä¢ –í—Ä–µ–º–µ–Ω–∏ –ø–æ–≥—Ä—É–∑–∫–∏\n` +
            `‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n` +
            `‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n\n` +
            `‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.`

          await sendMessage(chatId, completionMessage)

          console.log("=== USER REGISTRATION COMPLETED SUCCESSFULLY ===")

          return NextResponse.json({
            ok: true,
            status: "registration_completed",
            user_id: userId,
            carpark: carpark,
            timestamp: timestamp,
          })
        } catch (error) {
          console.error("‚ùå Error completing registration:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

          return NextResponse.json({
            ok: true, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ok: true —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å webhook
            status: "registration_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          })
        }
      }

      // –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–π—Å–∞ —Å —Ä–µ–ø–ª–∞–µ–º
      if (data?.startsWith("confirm_")) {
        const messageId = Number.parseInt(data.split("_")[1])
        console.log(`Processing confirmation for message ${messageId}`)

        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
          const messageResult = await sql`
            SELECT 
              trip_id,
              phone,
              telegram_message_id
            FROM trip_messages 
            WHERE id = ${messageId}
            LIMIT 1
          `

          let phone, trip_id, telegramMessageId
          if (messageResult.length === 0) {
            console.log(`Message ${messageId} not found, trying to find by user telegram_id`)

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            const userMessageResult = await sql`
              SELECT 
                trip_id,
                phone,
                telegram_message_id
              FROM trip_messages
              WHERE telegram_id = ${userId} AND response_status = 'pending'
              LIMIT 1
            `

            if (userMessageResult.length === 0) {
              throw new Error(`No pending messages found for user ${userId}`)
            }

            phone = userMessageResult[0].phone
            trip_id = userMessageResult[0].trip_id
            telegramMessageId = userMessageResult[0].telegram_message_id
          } else {
            phone = messageResult[0].phone
            trip_id = messageResult[0].trip_id
            telegramMessageId = messageResult[0].telegram_message_id
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
          const updateResult = await sql`
            UPDATE trip_messages 
            SET response_status = 'confirmed', 
                response_comment = NULL,
                response_at = ${new Date().toISOString()}
            WHERE phone = ${phone} AND trip_id = ${trip_id}
            RETURNING id
          `

          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await answerCallbackQuery(callbackQuery.id, "–°–ø–∞—Å–∏–±–æ! –†–µ–π—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
          if (callbackQuery.message?.message_id) {
            await editMessageReplyMarkup(chatId, callbackQuery.message.message_id, { inline_keyboard: [] })
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∞–π –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await sendReplyToMessage(
            chatId, 
            telegramMessageId, 
            "‚úÖ –†–µ–π—Å(—ã) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω(—ã)\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"
          );

          return NextResponse.json({ ok: true, status: "confirmed_processed" })
        } catch (error) {
          console.error("Error processing confirmation:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
          return NextResponse.json({ ok: true, status: "confirmation_error" })
        }
      }

      // –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã
      if (data?.startsWith("reject_")) {
        const messageId = Number.parseInt(data.split("_")[1])
        console.log(`Processing rejection for message ${messageId}`)

        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è
          const pendingCheck = await sql`
            SELECT COUNT(*) as count
            FROM trip_messages 
            WHERE telegram_id = ${userId} AND response_status = 'pending'
          `

          if (pendingCheck[0].count === 0) {
            throw new Error("No pending messages found for this user")
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pending action –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
          await setUserPendingAction(
            user.id, 
            "awaiting_rejection_reason", 
            messageId, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏
            { 
              chatId, 
              originalMessageId: callbackQuery.message?.message_id 
            }
          )

          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await answerCallbackQuery(callbackQuery.id, "–í–Ω–µ—Å–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (callbackQuery.message?.message_id) {
            await editMessageReplyMarkup(chatId, callbackQuery.message.message_id, { inline_keyboard: [] })
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã
          await sendMessage(
            chatId,
            `üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`
          )

          return NextResponse.json({ ok: true, status: "awaiting_rejection_reason" })
        } catch (error) {
          console.error("Error processing rejection:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
          return NextResponse.json({ ok: true, status: "rejection_error" })
        }
      }

      console.log("‚ùì Unknown callback query data:", data)
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback query –±–µ–∑ –æ—à–∏–±–æ–∫
      await answerCallbackQuery(callbackQuery.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
      return NextResponse.json({ ok: true, status: "callback_ignored" })
    }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç.–¥.)
        if (update.message) {
          const message = update.message;
          const chatId = message.chat.id;
          const userId = message.from.id;
          const messageText = message.text;

          console.log(`=== PROCESSING MESSAGE ===`);
          console.log(`User: ${userId} (${message.from.first_name})`);
          console.log(`Chat: ${chatId}`);
          console.log(`Text: "${messageText}"`);

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          const existingUser = await getUserByTelegramId(userId);

          // –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞
          if (existingUser && messageText) {
            const pendingAction = await getUserPendingAction(existingUser.id);
            
            if (pendingAction && pendingAction.action_type === "awaiting_rejection_reason") {
              console.log(`Processing rejection reason: "${messageText}"`);
              
              try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ pending action
                const actionData = JSON.parse(pendingAction.action_data || "{}");
                const tripMessageId = pendingAction.related_message_id;
                const originalMessageId = actionData.originalMessageId;
                
                if (!tripMessageId) {
                  throw new Error("No trip message ID in pending action");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const updateResult = await sql`
                  UPDATE trip_messages 
                  SET response_status = 'rejected', 
                      response_comment = ${messageText},
                      response_at = ${new Date().toISOString()}
                  WHERE id = ${tripMessageId}
                  RETURNING id
                `;

                console.log(`Updated ${updateResult.length} messages`);

                // –£–¥–∞–ª—è–µ–º pending action
                await deleteUserPendingAction(existingUser.id);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º
                if (originalMessageId) {
                  await sendReplyToMessage(
                    chatId,
                    originalMessageId,
                    `‚ùå –†–µ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${messageText}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç.`
                  );
                } else {
                  await sendMessage(
                    chatId,
                    `‚ùå –†–µ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${messageText}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç.`
                  );
                }

                return NextResponse.json({ ok: true, status: "rejection_reason_processed" });
              } catch (error) {
                console.error("Error processing rejection reason:", error);
                await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.");
                return NextResponse.json({ ok: true, status: "rejection_reason_error" });
              }
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /toroute
          if (messageText === "/toroute") {
            console.log("=== PROCESSING /TOROUTE COMMAND ===");

            try {
              // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ pending actions –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—ã
              if (existingUser) {
                await deleteUserPendingAction(existingUser.id);
                console.log("Cleared pending actions for user on /toroute");
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              if (!existingUser || existingUser.registration_state !== "completed") {
                await sendMessage(
                  chatId,
                  "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /toroute –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
                );
                return NextResponse.json({
                  ok: true,
                  status: "user_not_registered",
                  timestamp: timestamp,
                });
              }

              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
              const allPoints = await getAllPoints();

              if (allPoints.length < 2) {
                await sendMessage(
                  chatId,
                  "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                );
                return NextResponse.json({
                  ok: true,
                  status: "insufficient_points",
                  timestamp: timestamp,
                });
              }

              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pending action –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
              await setUserPendingAction(existingUser.id, "building_route_start", null, { points: [] });

              const welcomeMessage = `üó∫Ô∏è <b>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞</b>\n\n` + `üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:`;

              // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
              const buttons = [];

              for (let i = 0; i < allPoints.length; i += 2) {
                const row = [];
                row.push({
                  text: `${allPoints[i].point_id} ${allPoints[i].point_name}`,
                  callback_data: `route_point_${allPoints[i].point_id}`,
                });
                if (i + 1 < allPoints.length) {
                  row.push({
                    text: `${allPoints[i + 1].point_id} ${allPoints[i + 1].point_name}`,
                    callback_data: `route_point_${allPoints[i + 1].point_id}`,
                  });
                }
                buttons.push(row);
              }

              // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
              buttons.push([
                {
                  text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                  callback_data: "route_cancel",
                },
              ]);

              await sendMessageWithButtons(chatId, welcomeMessage, buttons);

              console.log("=== /TOROUTE COMMAND PROCESSED SUCCESSFULLY ===");

              return NextResponse.json({
                ok: true,
                status: "toroute_started",
                available_points: allPoints.length,
                timestamp: timestamp,
                user_id: userId,
                chat_id: chatId,
              });
            } catch (error) {
              console.error("=== ERROR PROCESSING /TOROUTE ===", error);
              await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.");
              return NextResponse.json({
                ok: true,
                status: "toroute_error",
                error: error instanceof Error ? error.message : "Unknown error",
                timestamp: timestamp,
              });
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
          if (messageText === "/status") {
            console.log("=== PROCESSING /STATUS COMMAND ===");

            try {
              if (!existingUser) {
                await sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\nüì± –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start");
                return NextResponse.json({
                  ok: true,
                  status: "user_not_found",
                  timestamp: timestamp,
                });
              }

              let statusMessage = `üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n`;
              statusMessage += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${existingUser.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
              statusMessage += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +${existingUser.phone}\n`;

              if (existingUser.registration_state === "completed") {
                statusMessage += `‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n`;
                statusMessage += `üë§ <b>–§–ò–û:</b> ${existingUser.full_name}\n`;
                statusMessage += `üè¢ <b>–ê–≤—Ç–æ–ø–∞—Ä–∫:</b> ${existingUser.carpark}\n\n`;
                statusMessage += `üöõ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Å–∞—Ö`;
              } else {
                statusMessage += `‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n`;
                statusMessage += `üìù <b>–≠—Ç–∞–ø:</b> ${existingUser.registration_state}\n\n`;
                statusMessage += `üí° –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start`;
              }

              await sendMessage(chatId, statusMessage);

              return NextResponse.json({
                ok: true,
                status: "status_sent",
                registration_state: existingUser.registration_state,
                timestamp: timestamp,
              });
            } catch (error) {
              console.error("Error processing /status:", error);
              await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.");
              return NextResponse.json({
                ok: true,
                status: "status_error",
                timestamp: timestamp,
              });
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
          if (messageText === "/help") {
            console.log("=== PROCESSING /HELP COMMAND ===");

            try {
              let helpMessage = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n`;
              helpMessage += `ü§ñ <b>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:</b>\n`;
              helpMessage += `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–π—Å–∞—Ö\n`;
              helpMessage += `‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤\n`;
              helpMessage += `‚Ä¢ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏\n\n`;

              helpMessage += `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n`;
              helpMessage += `üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n`;
              helpMessage += `üó∫Ô∏è /toroute - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏\n`;
              helpMessage += `üìä /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n`;
              helpMessage += `‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n`;

              if (existingUser && existingUser.registration_state === "completed") {
                helpMessage += `‚úÖ <b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n`;
                helpMessage += `üöõ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Å–∞—Ö\n\n`;
              } else {
                helpMessage += `üì± <b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b>\n`;
                helpMessage += `1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n`;
                helpMessage += `2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n`;
                helpMessage += `3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n`;
              }

              helpMessage += `üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n`;
              helpMessage += `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`;

              await sendMessage(chatId, helpMessage);

              return NextResponse.json({
                ok: true,
                status: "help_sent",
                timestamp: timestamp,
              });
            } catch (error) {
              console.error("Error processing /help:", error);
              await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.");
              return NextResponse.json({
                ok: true,
                status: "help_error",
                timestamp: timestamp,
              });
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
          if (messageText === "/start") {
            console.log("=== PROCESSING /START COMMAND ===");

            try {
              // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ pending actions –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
              if (existingUser) {
                await deleteUserPendingAction(existingUser.id);
                console.log("Cleared pending actions for user on /start");
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              if (existingUser && existingUser.registration_state === "completed") {
                const registeredMessage =
                  `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${existingUser.first_name}!\n\n` +
                  `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n` +
                  `üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
                  `üë§ –§–ò–û: ${existingUser.full_name}\n` +
                  `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +${existingUser.phone}\n` +
                  `üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: ${existingUser.carpark}\n\n` +
                  `üöõ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–µ–π—Å–∞—Ö.\n\n` +
                  `üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
                  `üó∫Ô∏è /toroute - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏`;

                await sendMessage(chatId, registeredMessage);

                return NextResponse.json({
                  ok: true,
                  status: "user_already_registered",
                  timestamp: timestamp,
                });
              }

              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
              const welcomeMessage =
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n" +
                "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–µ–π—Å–∞—Ö –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.\n\n" +
                "üì± –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n" +
                "üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—á–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.";

              await sendMessage(chatId, welcomeMessage);
              await sendContactRequest(chatId);

              console.log("=== /START COMMAND PROCESSED SUCCESSFULLY ===");

              return NextResponse.json({
                ok: true,
                status: "start_processed",
                timestamp: timestamp,
                user_id: userId,
                chat_id: chatId,
              });
            } catch (error) {
              console.error("=== ERROR PROCESSING /START ===", error);
              return NextResponse.json({
                ok: true,
                status: "start_error",
                error: error instanceof Error ? error.message : "Unknown error",
                timestamp: timestamp,
              });
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pending action –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (existingUser) {
            const pendingAction = await getUserPendingAction(existingUser.id);

            if (pendingAction && pendingAction.action_type === "awaiting_rejection_reason" && messageText) {
              console.log(`Processing rejection reason: "${messageText}"`);

              try {
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ pending —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userMessagesResult = await sql`
                  SELECT phone, trip_id
                  FROM trip_messages 
                  WHERE telegram_id = ${userId} AND response_status = 'pending'
                  LIMIT 1
                `;

                if (userMessagesResult.length === 0) {
                  throw new Error("No pending messages found for this user");
                }

                const phone = userMessagesResult[0].phone;
                const trip_id = userMessagesResult[0].trip_id;
                console.log(`Rejecting for phone: ${phone}, trip_id: ${trip_id}`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ
                const updateResult = await sql`
                  UPDATE trip_messages 
                  SET response_status = 'rejected', 
                      response_comment = ${messageText},
                      response_at = ${new Date().toISOString()}
                  WHERE phone = ${phone} AND trip_id = ${trip_id}
                  RETURNING id
                `;

                console.log(`Updated ${updateResult.length} messages for phone ${phone}`);

                // –£–¥–∞–ª—è–µ–º pending action
                await deleteUserPendingAction(existingUser.id);

                await sendMessage(chatId, `‚ùå –†–µ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${messageText}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç.`);

                console.log("=== REJECTION REASON PROCESSED ===");

                return NextResponse.json({
                  ok: true,
                  status: "rejection_reason_processed",
                  message_id: pendingAction.related_message_id,
                  updated_messages: updateResult.length,
                  reason: messageText,
                  timestamp: timestamp,
                });
              } catch (error) {
                console.error("Error processing rejection reason:", error);
                await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.");

                return NextResponse.json({
                  ok: true,
                  status: "rejection_reason_error",
                  error: error instanceof Error ? error.message : "Unknown error",
                  timestamp: timestamp,
                });
              }
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
          if (message.contact) {
            console.log("=== PROCESSING CONTACT ===");
            console.log("Contact data:", message.contact);

            const phone = message.contact.phone_number;
            const name = `${message.contact.first_name} ${message.contact.last_name || ""}`.trim();

            try {
              const user = await createUser(userId, phone, name);

              const firstStepMessage =
                `üìù –û—Ç–ª–∏—á–Ω–æ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω: +${phone.startsWith("+") ? phone.slice(1) : phone}\n\n` +
                `–¢–µ–ø–µ—Ä—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n` +
                `üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ\n` +
                `(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á)`;

              await sendMessage(chatId, firstStepMessage);

              console.log("=== CONTACT PROCESSED, AWAITING FIRST NAME ===");

              return NextResponse.json({
                ok: true,
                status: "contact_processed_awaiting_first_name",
                phone: phone,
                name: name,
                timestamp: timestamp,
              });
            } catch (error) {
              console.error("=== ERROR PROCESSING CONTACT ===", error);
              await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");

              return NextResponse.json({
                ok: true,
                status: "contact_error",
                error: error instanceof Error ? error.message : "Unknown error",
                timestamp: timestamp,
              });
            }
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          if (messageText && messageText !== "/start" && messageText !== "/toroute") {
            console.log("=== PROCESSING TEXT MESSAGE ===");
            console.log("Existing user:", existingUser);

            if (!existingUser) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              const helpMessage =
                "üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n" +
                "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.";

              await sendMessage(chatId, helpMessage);
              await sendContactRequest(chatId);

              return NextResponse.json({
                ok: true,
                status: "help_sent",
                timestamp: timestamp,
              });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (existingUser.registration_state === "awaiting_first_name") {
              console.log(`Processing first name input: "${messageText}"`);

              // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤–∞
              const nameParts = messageText.trim().split(/\s+/);
              if (nameParts.length < 2) {
                await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á");
                return NextResponse.json({
                  ok: true,
                  status: "invalid_first_name_format",
                  timestamp: timestamp,
                });
              }

              try {
                await updateUserRegistrationStep(userId, "first_name", messageText.trim());

                const lastNameMessage =
                  `‚úÖ –ò–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω—ã: ${messageText.trim()}\n\n` + `üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é:`;

                await sendMessage(chatId, lastNameMessage);

                console.log("=== FIRST NAME PROCESSED ===");

                return NextResponse.json({
                  ok: true,
                  status: "first_name_processed",
                  first_name: messageText.trim(),
                  timestamp: timestamp,
                });
              } catch (error) {
                console.error("Error processing first name:", error);
                await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");

                return NextResponse.json({
                  ok: true,
                  status: "first_name_error",
                  error: error instanceof Error ? error.message : "Unknown error",
                  timestamp: timestamp,
                });
              }
            }

            if (existingUser.registration_state === "awaiting_last_name") {
              console.log(`Processing last name input: "${messageText}"`);

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
              const lastName = messageText.trim();
              if (lastName.length < 2) {
                await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.");
                return NextResponse.json({
                  ok: true,
                  status: "invalid_last_name_format",
                  timestamp: timestamp,
                });
              }

              try {
                await updateUserRegistrationStep(userId, "last_name", lastName);

                const carparkMessage =
                  `‚úÖ –§–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${lastName}\n\n` +
                  `üè¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∞–≤—Ç–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ:\n\n` +
                  `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:`;

                const carparkButtons = [
                  [
                    { text: "üöõ –ê–≤—Ç–æ–ø–∞—Ä–∫ 8009", callback_data: "carpark_8009" },
                    { text: "üöö –ê–≤—Ç–æ–ø–∞—Ä–∫ 8012", callback_data: "carpark_8012" },
                  ],
                ];

                await sendMessageWithButtons(chatId, carparkMessage, carparkButtons);

                console.log("=== LAST NAME PROCESSED, SHOWING CARPARK BUTTONS ===");

                return NextResponse.json({
                  ok: true,
                  status: "last_name_processed_awaiting_carpark",
                  last_name: lastName,
                  timestamp: timestamp,
                });
              } catch (error) {
                console.error("Error processing last name:", error);
                await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");

                return NextResponse.json({
                  ok: true,
                  status: "last_name_error",
                  error: error instanceof Error ? error.message : "Unknown error",
                  timestamp: timestamp,
                });
              }
            }

            if (existingUser.registration_state === "completed") {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              const registeredMessage =
                `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${existingUser.first_name}!\n\n` +
                `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n` +
                `üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
                `üë§ –§–ò–û: ${existingUser.full_name}\n` +
                `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +${existingUser.phone}\n` +
                `üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: ${existingUser.carpark}\n\n` +
                `üöõ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–µ–π—Å–∞—Ö.\n\n` +
                `üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
                `üó∫Ô∏è /toroute - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏`;

              await sendMessage(chatId, registeredMessage);

              return NextResponse.json({
                ok: true,
                status: "user_already_registered",
                timestamp: timestamp,
              });
            }

            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log(`Unknown registration state: ${existingUser.registration_state}`);
            await sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");

            return NextResponse.json({
              ok: true,
              status: "unknown_state",
              registration_state: existingUser.registration_state,
              timestamp: timestamp,
            });
          }

          console.log("No specific handler for this message type");
          return NextResponse.json({
            ok: true,
            status: "ignored",
            message_type: message.contact ? "contact" : messageText ? "text" : "other",
            timestamp: timestamp,
          });
        }
      }
    }
  

export async function GET() {
  console.log("GET request to telegram-webhook endpoint")

  return NextResponse.json({
    status:
      "Telegram webhook endpoint is working with FULL REGISTRATION LOGIC + CALLBACK HANDLING + ERROR RESILIENCE + ROUTE BUILDING",
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV,
    vercel_url: process.env.VERCEL_URL,
    endpoint: "/api/telegram-webhook",
  })
}
