import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

interface TelegramMessage {
  message_id: number
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  chat: {
    id: number
    type: string
  }
  text?: string
  contact?: {
    phone_number: string
    first_name: string
    last_name?: string
  }
}

interface TelegramCallbackQuery {
  id: string
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  message?: TelegramMessage
  data?: string
}

interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–ª–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendReplyToMessage(chatId: number, replyToMessageId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      reply_to_message_id: replyToMessageId
    }

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send reply message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending reply message:", error)
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–ª–∞–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendMessage(chatId, text)
    throw error
  }
}

async function sendMessage(chatId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

async function sendMessageWithButtons(
  chatId: number,
  text: string,
  buttons: Array<Array<{ text: string; callback_data: string }>>,
) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== SENDING MESSAGE WITH BUTTONS ===")
  console.log("Chat ID:", chatId)
  console.log("Text:", text)
  console.log("Buttons:", JSON.stringify(buttons, null, 2))

  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: buttons,
      },
    }

    console.log("Full payload:", JSON.stringify(payload, null, 2))

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()
    console.log("Telegram API response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message with buttons")
    }

    console.log("=== BUTTONS MESSAGE SENT SUCCESSFULLY ===")
    return data.result
  } catch (error) {
    console.error("Error sending Telegram message with buttons:", error)
    throw error
  }
}

async function editMessageReplyMarkup(chatId: number, messageId: number, replyMarkup?: any) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== EDITING MESSAGE REPLY MARKUP ===")
  console.log("Chat ID:", chatId)
  console.log("Message ID:", messageId)
  console.log("New reply markup:", JSON.stringify(replyMarkup, null, 2))

  try {
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: replyMarkup,
    }

    const response = await fetch(`${TELEGRAM_API_URL}/editMessageReplyMarkup`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()
    console.log("editMessageReplyMarkup response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      console.error("Failed to edit message reply markup:", data.description)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      return null
    }

    console.log("=== MESSAGE REPLY MARKUP EDITED SUCCESSFULLY ===")
    return data.result
  } catch (error) {
    console.error("Error editing message reply markup:", error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    return null
  }
}

async function sendContactRequest(chatId: number) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup: {
          keyboard: [
            [
              {
                text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
                request_contact: true,
              },
            ],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send contact request")
    }

    return data.result
  } catch (error) {
    console.error("Error sending contact request:", error)
    throw error
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== ANSWERING CALLBACK QUERY ===")
  console.log("Callback Query ID:", callbackQueryId)
  console.log("Answer text:", text)

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false,
      }),
    })

    const data = await response.json()
    console.log("answerCallbackQuery response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      console.error("Failed to answer callback query:", data.description)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback query
      return null
    }

    console.log("=== CALLBACK QUERY ANSWERED ===")
    return data.result
  } catch (error) {
    console.error("Error answering callback query:", error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback query
    return null
  }
}

async function createUser(telegramId: number, phone: string, name: string) {
  try {
    const normalizedPhone = phone.startsWith("+") ? phone.slice(1) : phone

    console.log(`Creating user: telegramId=${telegramId}, phone=${normalizedPhone}, name=${name}`)

    const result = await sql`
      INSERT INTO users (telegram_id, phone, name, registration_state)
      VALUES (${telegramId}, ${normalizedPhone}, ${name}, 'awaiting_first_name')
      ON CONFLICT (telegram_id) DO UPDATE SET
        phone = EXCLUDED.phone,
        name = EXCLUDED.name,
        registration_state = 'awaiting_first_name'
      RETURNING *
    `

    console.log("User created/updated:", result[0])
    return result[0]
  } catch (error) {
    console.error("Error creating user:", error)
    throw error
  }
}

async function getUserByTelegramId(telegramId: number) {
  try {
    const result = await sql`
      SELECT * FROM users WHERE telegram_id = ${telegramId}
    `
    console.log(`User found for telegram_id ${telegramId}:`, result[0] || "not found")
    return result[0]
  } catch (error) {
    console.error("Error getting user by telegram id:", error)
    throw error
  }
}

async function updateUserRegistrationStep(telegramId: number, step: string, data?: any) {
  try {
    console.log(`Updating registration step for user ${telegramId}: ${step} = ${data}`)

    let updateQuery

    switch (step) {
      case "first_name":
        updateQuery = sql`
          UPDATE users 
          SET temp_first_name = ${data}, registration_state = 'awaiting_last_name'
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      case "last_name":
        updateQuery = sql`
          UPDATE users 
          SET temp_last_name = ${data}, registration_state = 'awaiting_carpark'
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      case "carpark":
        updateQuery = sql`
          UPDATE users 
          SET carpark = ${data}, 
              first_name = temp_first_name,
              last_name = temp_last_name,
              full_name = temp_first_name || ' ' || temp_last_name,
              registration_state = 'completed',
              temp_first_name = NULL,
              temp_last_name = NULL
          WHERE telegram_id = ${telegramId}
          RETURNING *
        `
        break
      default:
        throw new Error(`Unknown registration step: ${step}`)
    }

    const result = await updateQuery
    console.log(`User registration step updated:`, result[0])
    return result[0]
  } catch (error) {
    console.error("Error updating user registration step:", error)
    throw error
  }
}

async function setUserPendingAction(userId: number, actionType: string, relatedMessageId?: number, actionData?: any) {
  try {
    const dataString = actionData ? JSON.stringify(actionData) : null
    console.log(
      `Setting pending action for user ${userId}: ${actionType}, messageId: ${relatedMessageId}, data: ${dataString}`,
    )

    const result = await sql`
      INSERT INTO user_pending_actions (user_id, action_type, related_message_id, action_data)
      VALUES (${userId}, ${actionType}, ${relatedMessageId || null}, ${dataString})
      ON CONFLICT (user_id) DO UPDATE SET
        action_type = EXCLUDED.action_type,
        related_message_id = EXCLUDED.related_message_id,
        action_data = EXCLUDED.action_data,
        created_at = CURRENT_TIMESTAMP
      RETURNING *
    `
    console.log(`Pending action set for user ${userId}:`, result[0])
    return result[0]
  } catch (error) {
    console.error("Error setting user pending action:", error)
    throw error
  }
}

async function getUserPendingAction(userId: number) {
  try {
    const result = await sql`
      SELECT * FROM user_pending_actions WHERE user_id = ${userId}
    `
    console.log(`Pending action for user ${userId}:`, result[0] || "not found")
    return result[0]
  } catch (error) {
    console.error("Error getting user pending action:", error)
    throw error
  }
}

async function deleteUserPendingAction(userId: number) {
  try {
    await sql`
      DELETE FROM user_pending_actions WHERE user_id = ${userId}
    `
    console.log(`Pending action deleted for user ${userId}`)
  } catch (error) {
    console.error("Error deleting user pending action:", error)
    throw error
  }
}

async function getAllPoints() {
  try {
    const result = await sql`
      SELECT point_id, point_name, latitude, longitude 
      FROM points 
      WHERE latitude IS NOT NULL AND longitude IS NOT NULL
      ORDER BY point_id ASC
    `
    return result
  } catch (error) {
    console.error("Error getting all points:", error)
    throw error
  }
}
export async function POST(request: NextRequest) {
  const timestamp = new Date().toISOString()
  console.log(`=== TELEGRAM WEBHOOK RECEIVED at ${timestamp} ===`)
  
  try {
    const update: TelegramUpdate = await request.json()
    console.log("=== FULL TELEGRAM UPDATE ===")
    console.log(JSON.stringify(update, null, 2))
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫) - –ü–†–ò–û–†–ò–¢–ï–¢!
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const userId = callbackQuery.from.id
      const chatId = callbackQuery.message?.chat.id || userId
      const messageId = callbackQuery.message?.message_id
      const data = callbackQuery.data
      
      console.log(`=== CALLBACK QUERY RECEIVED ===`)
      console.log(`User: ${userId}, Data: ${data}`)
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      if (data?.startsWith("route_point_")) {
        const pointId = data.replace("route_point_", "")
        console.log(`Processing route point selection: ${pointId}`)
        
        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }
          
          const pendingAction = await sql`
            SELECT * FROM user_pending_actions 
            WHERE user_id = ${user.id} AND action_type LIKE 'building_route_%'
          `
          
          if (!pendingAction.rows[0]) {
            await answerCallbackQuery(callbackQuery.id, "–°–µ—Å—Å–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞")
            await sendMessage(chatId, "‚è≥ –°–µ—Å—Å–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /toroute")
            return NextResponse.json({ ok: true, status: "route_session_expired" })
          }
          
          const allPoints = await sql`
            SELECT * FROM route_points 
            ORDER BY point_id
          `
          
          const selectedPoint = allPoints.rows.find(p => p.point_id === pointId)
          if (!selectedPoint) {
            throw new Error(`Point ${pointId} not found`)
          }
          
          let routePoints = []
          if (pendingAction.rows[0].action_type === "building_route_start") {
            // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
            routePoints = [selectedPoint]
            const stepMessage = `‚úÖ –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>${selectedPoint.point_id} ${selectedPoint.point_name}</b>\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`
            await sendMessage(chatId, stepMessage)
          } else if (pendingAction.rows[0].action_type === "building_route_continue") {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
            const existingData = pendingAction.rows[0].action_data ? JSON.parse(pendingAction.rows[0].action_data) : { points: [] }
            routePoints = [...existingData.points, selectedPoint]
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
            const selectedPointIds = routePoints.map(p => p.point_id)
            const availablePoints = allPoints.rows.filter((p: any) => !selectedPointIds.includes(p.point_id))
            
            if (availablePoints.length === 0) {
              // –í—Å–µ —Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
              const routeUrl = generateRouteUrl(routePoints)
              await deleteUserPendingAction(user.id)
              
              const resultMessage = `üèÅ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!\nüîó [–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö](${routeUrl})`
              if (messageId) {
                await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
              }
              await sendMessage(chatId, resultMessage)
              return NextResponse.json({ ok: true, status: "route_completed", total_points: routePoints.length })
            } else {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
              await setUserPendingAction(user.id, "building_route_continue", null, { points: routePoints })
              
              const stepMessage = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ (${routePoints.length} —à—Ç):\n` +
                routePoints.map((p: any, i: number) => `${i+1}. ${p.point_id} ${p.point_name}`).join('\n') +
                `\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç`
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              const controlButtons = []
              if (routePoints.length >= 2) {
                controlButtons.push({
                  text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
                  callback_data: "route_finish"
                })
              }
              controlButtons.push({
                text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data: "route_cancel"
              })
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
              const buttons = [controlButtons]
              for (let i = 0; i < availablePoints.length; i += 2) {
                const row = []
                row.push({
                  text: `${availablePoints[i].point_id} ${availablePoints[i].point_name}`,
                  callback_data: `route_point_${availablePoints[i].point_id}`
                })
                if (i + 1 < availablePoints.length) {
                  row.push({
                    text: `${availablePoints[i+1].point_id} ${availablePoints[i+1].point_name}`,
                    callback_data: `route_point_${availablePoints[i+1].point_id}`
                  })
                }
                buttons.push(row)
              }
              
              await sendMessageWithButtons(chatId, stepMessage, buttons)
              return NextResponse.json({ ok: true, status: "route_building_continued", point_id: pointId, total_points: routePoints.length })
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º pending action
          await setUserPendingAction(user.id, "building_route_continue", null, { points: routePoints })
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
          const allPoints = await sql`SELECT * FROM route_points ORDER BY point_id`
          const selectedPointIds = routePoints.map((p: any) => p.point_id)
          const availablePoints = allPoints.rows.filter((p: any) => !selectedPointIds.includes(p.point_id))
          
          const buttons = []
          // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          const controlButtons = []
          if (routePoints.length >= 2) {
            controlButtons.push({
              text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
              callback_data: "route_finish"
            })
          }
          controlButtons.push({
            text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data: "route_cancel"
          })
          buttons.push(controlButtons)
          
          // –ö–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏
          for (let i = 0; i < availablePoints.length; i += 2) {
            const row = []
            row.push({
              text: `${availablePoints[i].point_id} ${availablePoints[i].point_name}`,
              callback_data: `route_point_${availablePoints[i].point_id}`
            })
            if (i + 1 < availablePoints.length) {
              row.push({
                text: `${availablePoints[i+1].point_id} ${availablePoints[i+1].point_name}`,
                callback_data: `route_point_${availablePoints[i+1].point_id}`
              })
            }
            buttons.push(row)
          }
          
          await sendMessageWithButtons(chatId, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:", buttons)
          return NextResponse.json({ ok: true, status: "route_point_selected", point_id: pointId, total_points: routePoints.length })
          
        } catch (error) {
          console.error("Error processing route point selection:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")
          return NextResponse.json({ 
            ok: true,
            status: "route_point_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (data === "route_finish") {
        console.log(`üèÅ User ${userId} finishing route building`)
        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }
          
          const pendingAction = await sql`
            SELECT * FROM user_pending_actions 
            WHERE user_id = ${user.id} AND action_type LIKE 'building_route_%'
          `
          
          if (!pendingAction.rows[0]) {
            await answerCallbackQuery(callbackQuery.id, "–°–µ—Å—Å–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞")
            return NextResponse.json({ ok: true, status: "route_session_expired" })
          }
          
          const routeData = JSON.parse(pendingAction.rows[0].action_data)
          if (routeData.points.length < 2) {
            await answerCallbackQuery(callbackQuery.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞")
            return NextResponse.json({ ok: true, status: "not_enough_points" })
          }
          
          const routeUrl = generateRouteUrl(routeData.points)
          await deleteUserPendingAction(user.id)
          
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }
          
          const resultMessage = `üèÅ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!\nüîó [–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö](${routeUrl})`
          await sendMessage(chatId, resultMessage)
          return NextResponse.json({ ok: true, status: "route_completed", total_points: routeData.points.length })
          
        } catch (error) {
          console.error("Error finishing route building:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.")
          return NextResponse.json({ 
            ok: true,
            status: "route_finish_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (data === "route_cancel") {
        console.log(`‚ùå User ${userId} cancelling route building`)
        try {
          const user = await getUserByTelegramId(userId)
          if (user) {
            await deleteUserPendingAction(user.id)
          }
          
          await answerCallbackQuery(callbackQuery.id, "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
          
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }
          
          await sendMessage(chatId, "‚ùå –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
          return NextResponse.json({ ok: true, status: "route_cancelled" })
          
        } catch (error) {
          console.error("Error cancelling route:", error)
          return NextResponse.json({ 
            ok: true,
            status: "route_cancel_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–π—Å–∞
      if (data?.startsWith("confirm_")) {
        const messageId = Number.parseInt(data.split("_")[1])
        console.log(`Processing confirmation for message ${messageId}`)
        
        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await sql`
            UPDATE trip_messages
            SET response_status = 'confirmed', response_time = NOW()
            WHERE id = ${messageId} AND telegram_id = ${userId}
          `
          
          await answerCallbackQuery(callbackQuery.id, "–†–µ–π—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
          
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }
          
          await sendMessage(chatId, "‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
          return NextResponse.json({ ok: true, status: "trip_confirmed", message_id: messageId })
          
        } catch (error) {
          console.error("Error confirming trip:", error)
          await answerCallbackQuery(callbackQuery.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–π—Å–∞")
          return NextResponse.json({ 
            ok: true,
            status: "trip_confirmation_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞
      if (data?.startsWith("reject_")) {
        const messageId = Number.parseInt(data.split("_")[1])
        console.log(`Processing rejection for message ${messageId}`)
        
        try {
          const user = await getUserByTelegramId(userId)
          if (!user) {
            throw new Error("User not found")
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
          const pendingCheck = await sql`
            SELECT COUNT(*) as count
            FROM trip_messages
            WHERE telegram_id = ${userId} AND response_status = 'pending'
          `
          
          if (pendingCheck.rows[0].count === 0) {
            throw new Error("No pending messages found for this user")
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
          await sql`
            UPDATE trip_messages
            SET response_status = 'rejected', response_time = NOW()
            WHERE id = ${messageId} AND telegram_id = ${userId}
          `
          
          await answerCallbackQuery(callbackQuery.id, "–†–µ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
          
          if (messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }
          
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
          await sendMessage(chatId, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–π—Å–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
          return NextResponse.json({ ok: true, status: "awaiting_rejection_reason" })
          
        } catch (error) {
          console.error("Error processing rejection:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
          return NextResponse.json({ ok: true, status: "rejection_error" })
        }
      }
      
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query
      console.log("‚ùì Unknown callback query data:", data)
      await answerCallbackQuery(callbackQuery.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
      return NextResponse.json({ ok: true, status: "callback_ignored" })
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
      const message = update.message
      const chatId = message.chat.id
      const userId = message.from?.id
      const messageText = message.text
      
      console.log(`=== TEXT MESSAGE RECEIVED ===`)
      console.log(`User: ${userId}, Message: ${messageText}`)
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const existingUser = await getUserByTelegramId(userId)
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (messageText === "/start") {
        console.log("=== PROCESSING /START COMMAND ===")
        
        try {
          if (existingUser) {
            await deleteUserPendingAction(existingUser.id)
            console.log("Cleared pending actions for user on /start")
          }
          
          // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const welcomeMessage = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n" +
            "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–µ–π—Å–∞—Ö –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.\n" +
            "üì± –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" +
            "üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—á–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
          
          await sendMessage(chatId, welcomeMessage)
          await sendContactRequest(chatId)
          
          console.log("=== /START COMMAND PROCESSED SUCCESSFULLY ===")
          return NextResponse.json({ 
            ok: true,
            status: "start_processed",
            timestamp: timestamp,
            user_id: userId,
            chat_id: chatId 
          })
          
        } catch (error) {
          console.error("=== ERROR PROCESSING /START ===", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")
          return NextResponse.json({ 
            ok: true,
            status: "start_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /toroute
      if (messageText === "/toroute") {
        console.log("=== PROCESSING /TOROUTE COMMAND ===")
        
        try {
          if (!existingUser) {
            await sendMessage(chatId, "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return NextResponse.json({ ok: true, status: "unauthorized" })
          }
          
          if (existingUser.registration_state !== "completed") {
            await sendMessage(chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return NextResponse.json({ ok: true, status: "registration_not_completed" })
          }
          
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ pending actions –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—ã
          await deleteUserPendingAction(existingUser.id)
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏
          const allPointsResult = await sql`SELECT * FROM route_points ORDER BY point_id`
          
          if (allPointsResult.rowCount < 2) {
            await sendMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return NextResponse.json({ ok: true, status: "insufficient_points", timestamp: timestamp })
          }
          
          const allPoints = allPointsResult.rows
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pending action –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
          await setUserPendingAction(existingUser.id, "building_route_start", null, { points: [] })
          
          const welcomeMessage = "üó∫Ô∏è <b>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞</b>\n" +
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
          const buttons = []
          for (let i = 0; i < allPoints.length; i += 2) {
            const row = []
            row.push({
              text: `${allPoints[i].point_id} ${allPoints[i].point_name}`,
              callback_data: `route_point_${allPoints[i].point_id}`
            })
            if (i + 1 < allPoints.length) {
              row.push({
                text: `${allPoints[i+1].point_id} ${allPoints[i+1].point_name}`,
                callback_data: `route_point_${allPoints[i+1].point_id}`
              })
            }
            buttons.push(row)
          }
          
          await sendMessageWithButtons(chatId, welcomeMessage, buttons)
          
          return NextResponse.json({ 
            ok: true,
            status: "toroute_started",
            available_points: allPoints.length,
            timestamp: timestamp 
          })
          
        } catch (error) {
          console.error("=== ERROR PROCESSING /TOROUTE ===", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.")
          return NextResponse.json({ 
            ok: true,
            status: "toroute_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
      if (messageText === "/status") {
        console.log("=== PROCESSING /STATUS COMMAND ===")
        
        try {
          if (!existingUser) {
            await sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return NextResponse.json({ ok: true, status: "not_registered" })
          }
          
          const statusMessage = `üìä <b>–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n` +
            `üë§ –§–ò–û: ${existingUser.full_name}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: +${existingUser.phone}\n` +
            `üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: ${existingUser.carpark}\n` +
            `‚úÖ –°—Ç–∞—Ç—É—Å: ${existingUser.registration_state}\n\n` +
            `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /toroute –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞`
          
          await sendMessage(chatId, statusMessage)
          return NextResponse.json({ ok: true, status: "status_shown", registration_state: existingUser.registration_state })
          
        } catch (error) {
          console.error("Error processing /status:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return NextResponse.json({ 
            ok: true,
            status: "status_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
      if (message.contact) {
        console.log("=== PROCESSING CONTACT ===")
        console.log("Contact data:", message.contact)
        
        const phone = message.contact.phone_number
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
          const existingUserResult = await sql`
            SELECT * FROM users WHERE phone = ${phone}
          `
          
          if (existingUserResult.rows[0]) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await sendMessage(chatId, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return NextResponse.json({ ok: true, status: "user_already_registered" })
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newUserResult = await sql`
            INSERT INTO users (telegram_id, phone, registration_state)
            VALUES (${message.from.id}, ${phone}, 'awaiting_first_name')
            RETURNING *
          `
          
          const newUser = newUserResult.rows[0]
          
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
          const firstStepMessage = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" +
            "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω.\n" +
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω)"
          
          await sendMessage(chatId, firstStepMessage)
          
          console.log("=== CONTACT PROCESSED, AWAITING FIRST NAME ===")
          return NextResponse.json({ 
            ok: true,
            status: "contact_processed_awaiting_first_name",
            phone: phone,
            name: newUser.full_name,
            timestamp: timestamp 
          })
          
        } catch (error) {
          console.error("=== ERROR PROCESSING CONTACT ===", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
          return NextResponse.json({ 
            ok: true,
            status: "contact_error",
            error: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp 
          })
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      if (messageText && messageText !== "/start" && messageText !== "/toroute") {
        console.log("=== PROCESSING TEXT MESSAGE ===")
        console.log("Existing user:", existingUser)
        
        if (!existingUser) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          const helpMessage = "üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n" +
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
          
          await sendMessage(chatId, helpMessage)
          await sendContactRequest(chatId)
          return NextResponse.json({ ok: true, status: "registration_required" })
        }
        
        if (existingUser.registration_state === "awaiting_first_name") {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
          console.log(`Processing first name input: "${messageText}"`)
          
          const firstName = messageText.trim()
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
          if (firstName.length < 2) {
            await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
            return NextResponse.json({ ok: true, status: "invalid_first_name_format", timestamp: timestamp })
          }
          
          try {
            await updateUserRegistrationStep(existingUser.id, "first_name", firstName)
            
            const lastNameMessage = "‚úÖ –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ: " + firstName + "\n" +
              "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤)"
            
            await sendMessage(chatId, lastNameMessage)
            return NextResponse.json({ 
              ok: true,
              status: "first_name_processed_awaiting_last_name",
              first_name: firstName,
              timestamp: timestamp 
            })
            
          } catch (error) {
            console.error("Error processing first name:", error)
            await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return NextResponse.json({ 
              ok: true,
              status: "first_name_error",
              error: error instanceof Error ? error.message : "Unknown error",
              timestamp: timestamp 
            })
          }
        }
        
        if (existingUser.registration_state === "awaiting_last_name") {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
          console.log(`Processing last name input: "${messageText}"`)
          
          const lastName = messageText.trim()
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
          if (lastName.length < 2) {
            await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.")
            return NextResponse.json({ ok: true, status: "invalid_last_name_format", timestamp: timestamp })
          }
          
          try {
            await updateUserRegistrationStep(existingUser.id, "last_name", lastName)
            
            const carparkMessage = "‚úÖ –§–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–µ–Ω–∞: " + lastName + "\n" +
              "üè¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∞–≤—Ç–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ:\n" +
              "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"
            
            const carparkButtons = [[
              { text: "üöõ –ê–≤—Ç–æ–ø–∞—Ä–∫ 8009", callback_data: "carpark_8009" },
              { text: "üöö –ê–≤—Ç–æ–ø–∞—Ä–∫ 8012", callback_data: "carpark_8012" }
            ]]
            
            await sendMessageWithButtons(chatId, carparkMessage, carparkButtons)
            console.log("=== LAST NAME PROCESSED, SHOWING CARPARK BUTTONS ===")
            
            return NextResponse.json({ 
              ok: true,
              status: "last_name_processed_awaiting_carpark",
              last_name: lastName,
              timestamp: timestamp 
            })
            
          } catch (error) {
            console.error("Error processing last name:", error)
            await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return NextResponse.json({ 
              ok: true,
              status: "last_name_error",
              error: error instanceof Error ? error.message : "Unknown error",
              timestamp: timestamp 
            })
          }
        }
        
        if (existingUser.registration_state === "completed") {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          const registeredMessage = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + existingUser.first_name + "!\n" +
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n" +
            "üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
            "üë§ –§–ò–û: " + existingUser.full_name + "\n" +
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +" + existingUser.phone + "\n" +
            "üè¢ –ê–≤—Ç–æ–ø–∞—Ä–∫: " + existingUser.carpark + "\n" +
            "üöõ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–µ–π—Å–∞—Ö.\n" +
            "üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
            "üó∫Ô∏è /toroute - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"
          
          await sendMessage(chatId, registeredMessage)
          return NextResponse.json({ ok: true, status: "user_already_registered", timestamp: timestamp })
        }
      }
    }
    
    return NextResponse.json({ ok: true, status: "unknown_update_type" })
    
  } catch (error) {
    console.error("=== UNHANDLED ERROR ===")
    console.error("Error details:", error)
    console.error("Stack trace:", error instanceof Error ? error.stack : "No stack trace")
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok: true —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å webhook
    return NextResponse.json({ 
      ok: true,
      status: "error_handled",
      error: error instanceof Error ? error.message : "Unknown error",
      timestamp: timestamp 
    })
  }
}

export async function GET() {
  console.log("GET request to telegram-webhook endpoint")
  return NextResponse.json({ 
    status: "Telegram webhook endpoint is working with FULL REGISTRATION LOGIC + CALLBACK HANDLING + ERROR RESILIENCE + ROUTE BUILDING" 
  })
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateRouteUrl(points: any[]): string {
  if (points.length < 2) return ''
  
  const coordinates = points.map((p) => `${p.latitude},${p.longitude}`).join("~")
  return `https://yandex.ru/maps/?mode=routes&rtt=auto&rtext=${coordinates}&utm_source=ymaps_app_redirect`
}
