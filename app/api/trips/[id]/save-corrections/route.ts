import { type NextRequest, NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  const tripId = Number.parseInt(params.id)
  const { phone, corrections, deletedTrips = [] } = await request.json()

  try {
    console.log(`Saving corrections for trip ${tripId}, phone ${phone}`)
    console.log("Corrections data:", corrections)
    console.log("Deleted trips:", deletedTrips)

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await sql`BEGIN`

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResult = await sql`
      SELECT telegram_id, first_name, full_name
      FROM users
      WHERE phone = ${phone}
      LIMIT 1
    `
    if (userResult.length === 0) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }
    const user = userResult[0]
    const firstName = user.first_name || user.full_name || "–í–æ–¥–∏—Ç–µ–ª—å"

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ä–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if (deletedTrips.length > 0) {
      console.log(`Deleting trips: ${deletedTrips.join(", ")} for phone ${phone}`)

      for (const tripIdentifier of deletedTrips) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ trip_messages
        await sql`
          DELETE FROM trip_messages 
          WHERE trip_id = ${tripId} 
            AND phone = ${phone} 
            AND trip_identifier = ${tripIdentifier}
        `

        // –£–¥–∞–ª—è–µ–º –∏–∑ trip_points
        await sql`
          DELETE FROM trip_points 
          WHERE trip_id = ${tripId} 
            AND trip_identifier = ${tripIdentifier}
        `

        console.log(`Deleted trip ${tripIdentifier} for phone ${phone}`)
      }
    }

    try {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ original_trip outubro –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const originalTripGroups = new Map()

      for (const correction of corrections) {
        const originalKey = correction.original_trip_identifier || correction.trip_identifier
        if (!originalTripGroups.has(originalKey)) {
          originalTripGroups.set(originalKey, {
            original_trip_identifier: originalKey,
            new_trip_identifier: correction.trip_identifier,
            vehicle_number: correction.vehicle_number,
            planned_loading_time: correction.planned_loading_time,
            driver_comment: correction.driver_comment,
            points: [],
            is_new_trip: !correction.original_trip_identifier, // –ù–æ–≤—ã–π —Ä–µ–π—Å –µ—Å–ª–∏ –Ω–µ—Ç original
          })
        }

        if (correction.point_id) {
          originalTripGroups.get(originalKey).points.push({
            point_type: correction.point_type,
            point_num: correction.point_num,
            point_id: correction.point_id,
          })
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const tripsForMessage = []

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–π—Å
      for (const [originalTripIdentifier, tripData] of originalTripGroups) {
        if (tripData.is_new_trip) {
          console.log(`Creating new trip message for trip: ${tripData.new_trip_identifier}`)

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'sent'
          await sql`
            INSERT INTO trip_messages (
              trip_id, phone, message, telegram_id, status, response_status,
              trip_identifier, vehicle_number, planned_loading_time, driver_comment,
              sent_at
            )
            SELECT 
              ${tripId}, 
              ${phone}, 
              '–ù–æ–≤—ã–π —Ä–µ–π—Å (–¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ)', 
              telegram_id, 
              'sent',
              'pending',
              ${tripData.new_trip_identifier},
              ${tripData.vehicle_number},
              ${tripData.planned_loading_time},
              ${tripData.driver_comment || null},
              CURRENT_TIMESTAMP
            FROM users 
            WHERE phone = ${phone}
            LIMIT 1
          `

          console.log(`Created new trip message for ${tripData.new_trip_identifier}`)
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          await sql`
            UPDATE trip_messages 
            SET trip_identifier = ${tripData.new_trip_identifier},
                vehicle_number = ${tripData.vehicle_number},
                planned_loading_time = ${tripData.planned_loading_time},
                driver_comment = ${tripData.driver_comment || null},
                response_status = 'pending',
                response_comment = NULL,
                response_at = NULL
            WHERE trip_id = ${tripId} 
              AND metformin = ${phone} 
              AND trip_identifier = ${originalTripIdentifier}
          `

          console.log(`Updated existing trip message for ${originalTripIdentifier} -> ${tripData.new_trip_identifier}`)
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
        await sql`
          DELETE FROM trip_points 
          WHERE trip_id = ${tripId} 
            AND trip_identifier = ${originalTripIdentifier}
        `

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const loading_points = []
        const unloading_points = []

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º trip_identifier
        for (const point of tripData.points) {
          const pointResult = await sql`
            SELECT id, point_id, point_name, door_open_1, door_open_2, door_open_3, latitude, longitude
            FROM points 
            WHERE point_id = ${point.point_id}
          `

          if (pointResult.length > 0) {
            await sql`
              INSERT INTO trip_points (trip_id, point_id, point_type, point_num, trip_identifier)
              VALUES (${tripId}, ${pointResult[0].id}, ${point.point_type}, ${point.point_num}, ${tripData.new_trip_identifier})
            `

            console.log(`Added point ${point.point_id} to trip ${tripData.new_trip_identifier}`)

            const pointInfo = {
              point_id: pointResult[0].point_id,
              point_name: pointResult[0].point_name,
              point_num: point.point_num,
              door_open_1: pointResult[0].door_open_1,
              door_open_2: pointResult[0].door_open_2,
              door_open_3: pointResult[0].door_open_3,
              latitude: pointResult[0].latitude,
              longitude: pointResult[0].longitude,
            }

            if (point.point_type === "P") {
              loading_points.push(pointInfo)
            } else if (point.point_type === "D") {
              unloading_points.push(pointInfo)
            }
          }
        }

        tripsForMessage.push({
          trip_identifier: tripData.new_trip_identifier,
          vehicle_number: tripData.vehicle_number,
          planned_loading_time: tripData.planned_loading_time,
          driver_comment: tripData.driver_comment,
          loading_points,
          unloading_points,
        })
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤
      let message = `üîÑ <b>–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –†–ï–ô–°–û–í</b>\n\n`
      message += `üåÖ <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>\n\n`
      message += `üë§ –£–≤–∞–∂–∞–µ–º—ã–π, <b>${firstName}</b>\n\n`

      const isMultiple = tripsForMessage.length > 1
      message += `üöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω${isMultiple ? "—ã" : ""} <b>${tripsForMessage.length} —Ä–µ–π—Å${tripsForMessage.length > 1 ? "–∞" : ""}:</b>\n\n`

      const sortedTrips = [...tripsForMessage].sort((a, b) => {
        const timeA = new Date(a.planned_loading_time || "").getTime()
        const timeB = new Date(b.planned_loading_time || "").getTime()
        return timeA - timeB
      })

      sortedTrips.forEach((trip, tripIndex) => {
        console.log(`Processing trip ${tripIndex + 1}: ${trip.trip_identifier}`)

        message += `<b>–†–µ–π—Å ${tripIndex + 1}:</b>\n`
        message += `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: <b>${trip.trip_identifier}</b>\n`
        message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>${trip.vehicle_number}</b>\n`

        const formatDateTime = (dateTimeString: string): string => {
          try {
            if (!dateTimeString) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            const date = new Date(dateTimeString)
            if (isNaN(date.getTime())) return dateTimeString

            const day = date.getDate()
            const monthNames = [
              "—è–Ω–≤–∞—Ä—è",
              "—Ñ–µ–≤—Ä–∞–ª—è",
              "–º–∞—Ä—Ç–∞",
              "–∞–ø—Ä–µ–ª—è",
              "–º–∞—è",
              "–∏—é–Ω—è",
              "–∏—é–ª—è",
              "–∞–≤–≥—É—Å—Ç–∞",
              "—Å–µ–Ω—Ç—è–±—Ä—è",
              "–æ–∫—Ç—è–±—Ä—è",
              "–Ω–æ—è–±—Ä—è",
              "–¥–µ–∫–∞–±—Ä—è",
            ]
            const month = monthNames[date.getMonth()]

            const hours = date.getHours().toString().padStart(2, "0")
            const minutes = date.getMinutes().toString().padStart(2, "0")
            const time = `${hours}:${minutes}`

            return `${day} ${month} ${time}`
          } catch (error) {
            console.error("Error formatting date:", error)
            return dateTimeString
          }
        }

        message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: <b>${formatDateTime(trip.planned_loading_time)}</b>\n\n`

        if (trip.loading_points.length > 0) {
          message += `üì¶ <b>–ü–æ–≥—Ä—É–∑–∫–∞:</b>\n`
          trip.loading_points.forEach((point, index) => {
            message += `${index + 1}) <b>${point.point_id} ${point.point_name}</b>\n`
          })
          message += `\n`
        }

        if (trip.unloading_points.length > 0) {
          message += `üì§ <b>–†–∞–∑–≥—Ä—É–∑–∫–∞:</b>\n`
          trip.unloading_points.forEach((point, index) => {
            message += `${index + 1}) <b>${point.point_id} ${point.point_name}</b>\n`

            const windows = [point.door_open_1, point.door_open_2, point.door_open_3].filter((w) => w && w.trim())
            if (windows.length > 0) {
              message += `   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: <code>${windows.join(" | ")}</code>\n`
            }
          })
          message += `\n`
        }

        if (trip.driver_comment && trip.driver_comment.trim()) {
          message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:</b>\n<i>${trip.driver_comment}</i>\n\n`
        }

        const routePoints = [...trip.loading_points, ...trip.unloading_points]
        console.log(
          `Route points for trip ${trip.trip_identifier}:`,
          routePoints.map((p) => ({ id: p.point_id, lat: p.latitude, lng: p.longitude })),
        )

        const validPoints = routePoints.filter((p) => {
          const lat = typeof p.latitude === "string" ? Number.parseFloat(p.latitude) : p.latitude
          const lng = typeof p.longitude === "string" ? Number.parseFloat(p.longitude) : p.longitude
          return lat && lng && !isNaN(lat) && !isNaN(lng)
        })

        let routeUrl = null
        if (validPoints.length >= 2) {
          const coordinates = validPoints
            .map((p) => {
              const lat = typeof p.latitude === "string" ? Number.parseFloat(p.latitude) : p.latitude
              const lng = typeof p.longitude === "string" ? Number.parseFloat(p.longitude) : p.longitude
              return `${lat},${lng}`
            })
            .join("~")

          routeUrl = `https://yandex.ru/maps/?mode=routes&rtt=auto&rtext=${coordinates}&utm_source=ymaps_app_redirect`
          console.log(`Built route URL: ${routeUrl}`)
        } else {
          console.log(`No route URL generated for trip ${trip.trip_identifier} - insufficient coordinates`)
        }

        if (routeUrl) {
          message += `üó∫Ô∏è <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n`
          console.log(`Added route URL for trip ${trip.trip_identifier}`)
        }

        if (tripIndex < sortedTrips.length - 1) {
          message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`
        }
      })

      message += `üôè <b>–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å${isMultiple ? "—ã" : ""}</b>`

      console.log(`Final message length: ${message.length}`)
      console.log(`Message preview: ${message.substring(0, 200)}...`)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ message –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º trip_id –∏ phone
      await sql`
        UPDATE trip_messages 
        SET message = ${message}
        WHERE trip_id = ${tripId} AND phone = ${phone}
      `
      console.log(`Updated message field for trip_id ${tripId} and phone ${phone}`)

      await sql`COMMIT`

      console.log(
        `Corrections saved successfully for ${originalTripGroups.size} trips, deleted ${deletedTrips.length} trips`,
      )

      return NextResponse.json({
        success: true,
        message: "Corrections saved successfully",
        updatedTrips: originalTripGroups.size,
        deletedTrips: deletedTrips.length,
      })
    } catch (error) {
      await sql`ROLLBACK`
      throw error
    }
  } catch (error) {
    console.error("Error saving corrections:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Failed to save corrections",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
