import { type NextRequest, NextResponse } from "next/server"
import type { TelegramUpdate } from "@/lib/telegram"
import { createUser } from "@/lib/database"
import { sendMessage, sendContactRequest } from "@/lib/telegram"

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è webhook
export const dynamic = "force-dynamic"
export const runtime = "nodejs"

export async function POST(request: NextRequest) {
  const timestamp = new Date().toISOString()
  console.log(`=== WEBHOOK RECEIVED at ${timestamp} ===`)

  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type",
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
    const userAgent = request.headers.get("user-agent") || ""
    console.log("User-Agent:", userAgent)
    console.log("Request headers:", Object.fromEntries(request.headers.entries()))

    const update: TelegramUpdate = await request.json()
    console.log("Update data:", JSON.stringify(update, null, 2))

    if (!update.message) {
      console.log("No message in update, skipping")
      return NextResponse.json({ ok: true, status: "no_message" }, { headers })
    }

    const message = update.message
    const chatId = message.chat.id
    const userId = message.from.id
    const messageText = message.text

    console.log(`Processing message from user ${userId} (${message.from.first_name}) in chat ${chatId}`)
    console.log(`Message text: "${messageText}"`)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (messageText === "/start") {
      console.log("Processing /start command")

      try {
        const welcomeMessage =
          "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n" +
          "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n" +
          "üì± –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

        console.log("Sending welcome message...")
        await sendMessage(chatId, welcomeMessage)
        console.log("Welcome message sent successfully")

        console.log("Sending contact request...")
        await sendContactRequest(chatId)
        console.log("Contact request sent successfully")

        return NextResponse.json(
          {
            ok: true,
            status: "start_processed",
            timestamp: timestamp,
            user_id: userId,
            chat_id: chatId,
          },
          { headers },
        )
      } catch (error) {
        console.error("Error processing /start:", error)
        console.error("Error stack:", error instanceof Error ? error.stack : "No stack trace")

        try {
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        } catch (sendError) {
          console.error("Error sending error message:", sendError)
        }

        return NextResponse.json(
          {
            ok: false,
            error: "Failed to process start command",
            details: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          },
          { status: 500, headers },
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (message.contact) {
      console.log("Processing contact:", message.contact)

      const phone = message.contact.phone_number
      const name = `${message.contact.first_name} ${message.contact.last_name || ""}`.trim()

      try {
        console.log(`Creating user: ${phone}, ${name}`)
        await createUser(userId, phone, name)

        const successMessage =
          `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
          `üì± –í–∞—à –Ω–æ–º–µ—Ä: ${phone}\n` +
          `üë§ –ò–º—è: ${name}\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`

        await sendMessage(chatId, successMessage)
        console.log(`User registered successfully: ${phone}`)

        return NextResponse.json(
          {
            ok: true,
            status: "user_registered",
            phone: phone,
            timestamp: timestamp,
          },
          { headers },
        )
      } catch (error) {
        console.error("Error saving user:", error)
        console.error("Error stack:", error instanceof Error ? error.stack : "No stack trace")

        try {
          await sendMessage(
            chatId,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          )
        } catch (sendError) {
          console.error("Error sending error message:", sendError)
        }

        return NextResponse.json(
          {
            ok: false,
            error: "Failed to register user",
            details: error instanceof Error ? error.message : "Unknown error",
            timestamp: timestamp,
          },
          { status: 500, headers },
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messageText && messageText !== "/start") {
      console.log("Processing regular text message")

      try {
        const helpMessage =
          "üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n" +
          "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

        await sendMessage(chatId, helpMessage)
        await sendContactRequest(chatId)

        return NextResponse.json(
          {
            ok: true,
            status: "help_sent",
            timestamp: timestamp,
          },
          { headers },
        )
      } catch (error) {
        console.error("Error sending help message:", error)
        return NextResponse.json(
          {
            ok: false,
            error: "Failed to send help",
            timestamp: timestamp,
          },
          { status: 500, headers },
        )
      }
    }

    console.log("No specific handler for this message type")
    return NextResponse.json(
      {
        ok: true,
        status: "ignored",
        message_type: message.contact ? "contact" : messageText ? "text" : "other",
        timestamp: timestamp,
      },
      { headers },
    )
  } catch (error) {
    console.error("=== WEBHOOK ERROR ===")
    console.error("Error details:", error)
    console.error("Stack trace:", error instanceof Error ? error.stack : "No stack trace")
    console.error("Request method:", request.method)
    console.error("Request URL:", request.url)

    return NextResponse.json(
      {
        ok: false,
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
        timestamp: timestamp,
      },
      { status: 500, headers },
    )
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function GET(request: NextRequest) {
  console.log("GET request to webhook endpoint")
  console.log("Headers:", Object.fromEntries(request.headers.entries()))

  return NextResponse.json(
    {
      status: "Webhook endpoint is working",
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
      vercel_url: process.env.VERCEL_URL,
      method: "GET",
    },
    {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
      },
    },
  )
}

// –î–æ–±–∞–≤–ª—è–µ–º OPTIONS –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type",
    },
  })
}
