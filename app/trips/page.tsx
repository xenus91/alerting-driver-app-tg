"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RefreshCw, CheckCircle, Clock, Plus } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { TripCorrectionModal } from "@/components/trip-correction-modal" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫—É
import { TripTable } from "@/components/trip-table"

interface TripData {
  id: number
  created_at: string
  status: string
  total_messages: string | number
  sent_messages: string | number
  error_messages: string | number
  confirmed_responses: string | number
  rejected_responses: string | number
  declined_responses: string | number
  pending_responses: string | number
  first_sent_at?: string
  last_sent_at?: string
  carpark?: string
}

interface TripError {
  id: number
  phone: string
  error_message: string
  created_at: string
  user_name?: string
}

export default function TripsPage() {
  const { toast } = useToast()
  const [trips, setTrips] = useState<TripData[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [deletingTripId, setDeletingTripId] = useState<number | null>(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<number | null>(null)
  const [isCorrectionModalOpen, setIsCorrectionModalOpen] = useState(false)
  const [modalMode, setModalMode] = useState<"edit" | "create">("create")
  const [selectedTripForEdit, setSelectedTripForEdit] = useState<{
    tripId: number
    phone: string
    driverName: string
  } | null>(null)
  const [currentUser, setCurrentUser] = useState<{ telegram_id?: number } | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–æ–∫
  const [showErrorsDialog, setShowErrorsDialog] = useState<number | null>(null)
  const [tripErrors, setTripErrors] = useState<TripError[]>([])
  const [loadingErrors, setLoadingErrors] = useState(false)

  const fetchTrips = async () => {
    setIsLoading(true)
    try {
      const response = await fetch("/api/trips")
      const data = await response.json()
      if (data.success) {
        setTrips(data.trips)
      }
    } catch (error) {
      console.error("Error fetching trips:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const fetchTripErrors = async (tripId: number) => {
    setLoadingErrors(true)
    try {
      const response = await fetch(`/api/trips/${tripId}/errors`)
      const data = await response.json()
      if (data.success) {
        setTripErrors(data.errors)
      }
    } catch (error) {
      console.error("Error fetching trip errors:", error)
    } finally {
      setLoadingErrors(false)
    }
  }

  const handleShowErrors = (tripId: number) => {
    setShowErrorsDialog(tripId)
    fetchTripErrors(tripId)
  }

  const formatPhone = (phone: string) => {
    if (phone.startsWith("380") && phone.length === 12) {
      // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä: 380668863317 -> +380 (66) 886-33-17
      return `+380 (${phone.slice(3, 5)}) ${phone.slice(5, 8)}-${phone.slice(8, 10)}-${phone.slice(10)}`
    } else if (phone.startsWith("7") && phone.length === 11) {
      // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: 79050550020 -> +7 (905) 055-00-20
      return `+7 (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7, 9)}-${phone.slice(9)}`
    }
    return phone
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫ Telegram API
  const translateTelegramError = (errorMessage: string, userName?: string) => {
    const userNameText = userName && userName.trim() ? userName : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if (errorMessage.includes("bot was blocked by the user")) {
      return {
        userFriendly: `ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userNameText} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –Ω–∏–º.`,
        instruction: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start",
      }
    }

    if (errorMessage.includes("chat not found")) {
      return {
        userFriendly: `üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userNameText} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.`,
        instruction: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start",
      }
    }

    if (errorMessage.includes("user is deactivated")) {
      return {
        userFriendly: `üö´ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userNameText} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Telegram.`,
        instruction: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ Telegram",
      }
    }

    if (errorMessage.includes("Too Many Requests")) {
      return {
        userFriendly: `‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API.`,
        instruction: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
      }
    }

    if (errorMessage.includes("message is too long")) {
      return {
        userFriendly: `üìè –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userNameText} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.`,
        instruction: "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É",
      }
    }

    if (errorMessage.includes("Bad Request: invalid phone number")) {
      return {
        userFriendly: `üì± –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userNameText}.`,
        instruction: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
      }
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return {
      userFriendly: `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userNameText}.`,
      instruction: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
    }
  }

  useEffect(() => {
    fetchTrips()
  }, [])

  useEffect(() => {
    const getCurrentUser = async () => {
      try {
        const response = await fetch("/api/auth/me")
        const data = await response.json()
        if (data.success) {
          setCurrentUser(data.user)
        }
      } catch (error) {
        console.error("Error getting current user:", error)
      }
    }

    getCurrentUser()
  }, [])

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString("ru-RU")
  }

  const calculateSentPercentage = (sent: string | number, total: string | number) => {
    const sentNum = Number(sent)
    const totalNum = Number(total)
    return totalNum > 0 ? Math.round((sentNum / totalNum) * 100) : 0
  }

  const calculateResponsePercentage = (
    confirmed: string | number,
    rejected: string | number,
    declined: string | number, // –î–æ–±–∞–≤–ª—è–µ–º declined
    sent: string | number,
  ) => {
    const confirmedNum = Number(confirmed)
    const rejectedNum = Number(rejected)
    const declinedNum = Number(declined) // –î–æ–±–∞–≤–ª—è–µ–º declined
    const sentNum = Number(sent)

    if (sentNum === 0) return 0
    const totalResponses = confirmedNum + rejectedNum + declinedNum
    const percentage = (totalResponses / sentNum) * 100

    console.log(
      `Response calculation: confirmed=${confirmedNum}, rejected=${rejectedNum}, sent=${sentNum}, totalResponses=${totalResponses}, percentage=${percentage}`,
    )

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 100%
    return Math.min(Math.round(percentage), 100)
  }

  const getProgressColor = (percentage: number) => {
    if (percentage === 0) return "bg-gray-200"
    if (percentage < 30) return "bg-gradient-to-r from-red-500 to-red-400"
    if (percentage < 60) return "bg-gradient-to-r from-orange-500 to-yellow-400"
    if (percentage < 90) return "bg-gradient-to-r from-yellow-400 to-green-400"
    return "bg-gradient-to-r from-green-500 to-green-400"
  }

  const getTripStatus = (trip: TripData) => {
    const confirmedNum = Number(trip.confirmed_responses)
    const rejectedNum = Number(trip.rejected_responses)
    const declinedNum = Number(trip.declined_responses)
    const sentNum = Number(trip.sent_messages)
    const totalNum = Number(trip.total_messages)
    const totalResponses = confirmedNum + rejectedNum + declinedNum

    if (sentNum === 0) return "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    if (trip.status === "completed" || totalResponses === sentNum) return "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    if (sentNum < totalNum) return "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"
    if (trip.status === "active" && Number(trip.pending_responses) > 0) return "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤"
    return "–ê–∫—Ç–∏–≤–Ω–∞"
  }

  const getTripStatusBadge = (trip: TripData) => {
    const status = getTripStatus(trip)

    switch (status) {
      case "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":
        return (
          <Badge variant="default" className="bg-green-600">
            <CheckCircle className="h-3 w-3 mr-1" />
            –ó–∞–≤–µ—Ä—à–µ–Ω–∞
          </Badge>
        )
      case "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è":
        return (
          <Badge variant="default" className="bg-blue-600">
            <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
          </Badge>
        )
      case "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤":
        return (
          <Badge variant="secondary">
            <Clock className="h-3 w-3 mr-1" />
            –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤
          </Badge>
        )
      case "–ê–∫—Ç–∏–≤–Ω–∞":
        return (
          <Badge variant="default" className="bg-blue-500">
            <CheckCircle className="h-3 w-3 mr-1" />
            –ê–∫—Ç–∏–≤–Ω–∞
          </Badge>
        )
      default:
        return (
          <Badge variant="outline">
            <Clock className="h-3 w-3 mr-1" />
            {status}
          </Badge>
        )
    }
  }

  const getCardBackgroundColor = (trip: TripData) => {
    const confirmedNum = Number(trip.confirmed_responses)
    const rejectedNum = Number(trip.rejected_responses)
    const declinedNum = Number(trip.declined_responses)
    const pendingNum = Number(trip.pending_responses)
    const sentNum = Number(trip.sent_messages)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è - –±–ª–µ–¥–Ω–æ –∫—Ä–∞—Å–Ω—ã–π
    if (rejectedNum > 0) {
      return "bg-red-50 border-red-100"
    }

    // –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ - –±–ª–µ–¥–Ω–æ –∑–µ–ª–µ–Ω—ã–π
    if (sentNum > 0 && pendingNum === 0 && confirmedNum === sentNum) {
      return "bg-green-50 border-green-100"
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã - –±–ª–µ–¥–Ω–æ –∂–µ–ª—Ç—ã–π
    if (pendingNum > 0) {
      return "bg-yellow-50 border-yellow-100"
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
    return "bg-white border-gray-200"
  }

  const getTimeSinceSent = (trip: TripData, sentAt?: string) => {
    if (!sentAt) return "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

    const confirmedNum = Number(trip.confirmed_responses)
    const rejectedNum = Number(trip.rejected_responses)
    const declinedNum = Number(trip.declined_responses)
    const sentNum = Number(trip.sent_messages)
    const totalResponses = confirmedNum + rejectedNum

    const sent = new Date(sentAt)
    let endTime: Date

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –æ—Ç–≤–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (totalResponses === sentNum && sentNum > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º last_sent_at –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
      endTime = trip.last_sent_at ? new Date(trip.last_sent_at) : new Date()
    } else {
      // –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      endTime = new Date()
    }

    const diffMs = endTime.getTime() - sent.getTime()
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60))
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60))

    const timeText = diffHours > 0 ? `${diffHours}—á ${diffMinutes}–º` : `${diffMinutes}–º`

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (totalResponses === sentNum && sentNum > 0) {
      return `${timeText} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)`
    } else {
      return `${timeText} –Ω–∞–∑–∞–¥`
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
  const canDeleteTrip = (trip: TripData) => {
    const confirmedNum = Number(trip.confirmed_responses)
    const rejectedNum = Number(trip.rejected_responses)
    const declinedNum = Number(trip.declined_responses)
    const sentNum = Number(trip.sent_messages)
    const errorNum = Number(trip.error_messages)
    const totalResponses = confirmedNum + rejectedNum + declinedNum

    return sentNum > 0 && (totalResponses === sentNum || trip.status === "completed" || errorNum > 0)
  }

  const handleDeleteTrip = async (tripId: number) => {
    setDeletingTripId(tripId)
    try {
      const response = await fetch(`/api/trips/${tripId}`, {
        method: "DELETE",
      })

      const data = await response.json()
      if (!data.success) {
        throw new Error(data.error || "Failed to delete trip")
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
      await fetchTrips()
    } catch (error) {
      console.error("Error deleting trip:", error)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    } finally {
      setDeletingTripId(null)
      setShowDeleteConfirm(null)
    }
  }

  const handleOpenCorrectionModal = (tripId: number, phone: string, driverName: string) => {
    setModalMode("edit")
    setSelectedTripForEdit({ tripId, phone, driverName })
    setIsCorrectionModalOpen(true)
  }

  const handleOpenCreateModal = () => {
    setModalMode("create")
    setSelectedTripForEdit(null)
    setIsCorrectionModalOpen(true)
  }

  const handleCloseCorrectionModal = () => {
    setIsCorrectionModalOpen(false)
    setSelectedTripForEdit(null)
  }

  return (
    <div className="flex flex-col min-h-screen">
      <main className="flex-1 p-4 md:p-6">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</h1>
          <Button onClick={handleOpenCreateModal}>
            <Plus className="mr-2 h-4 w-4" />
            –ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
          </Button>
        </div>
        <Card>
          <CardHeader>
            <CardTitle>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫</CardTitle>
            <CardDescription>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.</CardDescription>
          </CardHeader>
          <CardContent>
            <TripTable onOpenCorrectionModal={handleOpenCorrectionModal} />
          </CardContent>
        </Card>

        <TripCorrectionModal
          isOpen={isCorrectionModalOpen}
          onClose={handleCloseCorrectionModal}
          mode={modalMode}
          tripId={selectedTripForEdit?.tripId}
          phone={selectedTripForEdit?.phone}
          driverName={selectedTripForEdit?.driverName}
          onOpenConflictTrip={handleOpenCorrectionModal} // –ü–µ—Ä–µ–¥–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        />
      </main>
    </div>
  )
}
