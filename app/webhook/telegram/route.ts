import { type NextRequest, NextResponse } from "next/server"
import { sql } from "@vercel/postgres"
import {
  sendMessage,
  sendContactRequest,
  answerCallbackQuery,
  editMessageReplyMarkup,
  type TelegramUpdate,
} from "@/lib/telegram"

export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json()
    console.log("Received Telegram update:", JSON.stringify(update, null, 2))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
      const message = update.message
      const chatId = message.chat.id
      const userId = message.from.id
      const text = message.text

      console.log(`Processing message from user ${userId}: ${text}`)

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === "/start") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUserResult = await sql`
          SELECT * FROM users WHERE telegram_user_id = ${userId}
        `

        if (existingUserResult.rows.length > 0) {
          const user = existingUserResult.rows[0]
          await sendMessage(
            chatId,
            `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n` +
              `üë§ –ò–º—è: ${user.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
              `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
              `üöó –ê–≤—Ç–æ–ø–∞—Ä–∫: ${user.carpark || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
              `‚úÖ –°—Ç–∞—Ç—É—Å: ${user.registration_state || "completed"}`,
          )
          return NextResponse.json({ ok: true })
        }

        // –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        await sendContactRequest(chatId)
        return NextResponse.json({ ok: true })
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      if (message.contact) {
        const contact = message.contact
        const phoneNumber = contact.phone_number.replace(/^\+/, "") // –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ

        console.log(`Processing contact: ${phoneNumber}`)

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
          const existingUserResult = await sql`
            SELECT * FROM users WHERE phone = ${phoneNumber}
          `

          if (existingUserResult.rows.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await sql`
              UPDATE users 
              SET telegram_user_id = ${userId}, 
                  telegram_chat_id = ${chatId},
                  first_name = ${contact.first_name},
                  last_name = ${contact.last_name || null},
                  registration_state = 'completed'
              WHERE phone = ${phoneNumber}
            `

            await sendMessage(
              chatId,
              `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phoneNumber} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç—É.\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Å–∞—Ö.`,
            )
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await sql`
              INSERT INTO users (
                phone, 
                telegram_user_id, 
                telegram_chat_id, 
                first_name, 
                last_name, 
                registration_state,
                role
              ) VALUES (
                ${phoneNumber}, 
                ${userId}, 
                ${chatId}, 
                ${contact.first_name}, 
                ${contact.last_name || null}, 
                'completed',
                'driver'
              )
            `

            await sendMessage(
              chatId,
              `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phoneNumber} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Å–∞—Ö.`,
            )
          }
        } catch (error) {
          console.error("Database error:", error)
          await sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        }

        return NextResponse.json({ ok: true })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message?.chat.id
      const messageId = callbackQuery.message?.message_id
      const data = callbackQuery.data

      console.log(`Processing callback query: ${data}`)

      if (data?.startsWith("confirm_") || data?.startsWith("reject_")) {
        const action = data.startsWith("confirm_") ? "confirmed" : "rejected"
        const tripMessageId = data.split("_")[1]

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await sql`
            UPDATE trip_messages 
            SET response = ${action}, response_time = NOW() 
            WHERE id = ${tripMessageId}
          `

          // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (chatId && messageId) {
            await editMessageReplyMarkup(chatId, messageId, { inline_keyboard: [] })
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          const responseText = action === "confirmed" ? "‚úÖ –†–µ–π—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!" : "‚ùå –†–µ–π—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!"
          await answerCallbackQuery(callbackQuery.id, responseText)

          console.log(`Trip message ${tripMessageId} ${action}`)
        } catch (error) {
          console.error("Error processing callback:", error)
          await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        }
      }

      return NextResponse.json({ ok: true })
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
