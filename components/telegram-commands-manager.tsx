"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Command, RefreshCw, CheckCircle, AlertCircle, Trash2, Plus, Settings, Bot, List } from "lucide-react"

interface TelegramCommand {
  command: string
  description: string
}

interface CommandsResponse {
  success: boolean
  commands?: TelegramCommand[]
  message?: string
  error?: string
}

export default function TelegramCommandsManager() {
  const [currentCommands, setCurrentCommands] = useState<TelegramCommand[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [isUpdating, setIsUpdating] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [result, setResult] = useState<any>(null)
  const [customCommands, setCustomCommands] = useState(`[
  {
    "command": "start",
    "description": "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
  },
  {
    "command": "toroute",
    "description": "üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"
  },
  {
    "command": "status",
    "description": "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
  },
  {
    "command": "help",
    "description": "‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
  }
]`)

  const fetchCurrentCommands = async () => {
    setIsLoading(true)
    setResult(null)
    try {
      const response = await fetch("/api/get-telegram-commands")
      const data: CommandsResponse = await response.json()

      if (data.success && data.commands) {
        setCurrentCommands(data.commands)
        setResult({
          success: true,
          message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.commands.length} –∫–æ–º–∞–Ω–¥`,
          type: "fetch",
        })
      } else {
        setCurrentCommands([])
        setResult({
          success: false,
          message: data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥",
          type: "fetch",
        })
      }
    } catch (error) {
      console.error("Error fetching commands:", error)
      setCurrentCommands([])
      setResult({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥",
        type: "fetch",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const deleteAllCommands = async () => {
    setIsDeleting(true)
    setResult(null)
    try {
      const response = await fetch("/api/delete-telegram-commands", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      })
      const data = await response.json()

      setResult({
        success: data.success,
        message: data.success ? "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã" : data.error,
        type: "delete",
      })

      if (data.success) {
        setCurrentCommands([])
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(fetchCurrentCommands, 1000)
      }
    } catch (error) {
      setResult({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥",
        type: "delete",
      })
    } finally {
      setIsDeleting(false)
    }
  }

  const setCommands = async (force = false) => {
    setIsUpdating(true)
    setResult(null)
    try {
      let commands: TelegramCommand[]
      try {
        commands = JSON.parse(customCommands)
      } catch (e) {
        setResult({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –∫–æ–º–∞–Ω–¥",
          type: "set",
        })
        setIsUpdating(false)
        return
      }

      const response = await fetch("/api/set-telegram-commands", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ force, commands }),
      })
      const data = await response.json()

      setResult({
        success: data.success,
        message: data.success ? `–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${force ? " (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)" : ""}` : data.error,
        type: "set",
      })

      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(fetchCurrentCommands, 1000)
      }
    } catch (error) {
      setResult({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥",
        type: "set",
      })
    } finally {
      setIsUpdating(false)
    }
  }

  const resetToDefault = () => {
    setCustomCommands(`[
  {
    "command": "start",
    "description": "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
  },
  {
    "command": "toroute",
    "description": "üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"
  },
  {
    "command": "status",
    "description": "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
  },
  {
    "command": "help",
    "description": "‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
  }
]`)
  }

  useEffect(() => {
    fetchCurrentCommands()
  }, [])

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Command className="h-5 w-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ Telegram –±–æ—Ç–∞
          </CardTitle>
          <CardDescription>–ü—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold flex items-center gap-2">
                <List className="h-4 w-4" />
                –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
              </h4>
              <Button variant="outline" size="sm" onClick={fetchCurrentCommands} disabled={isLoading}>
                {isLoading ? <RefreshCw className="h-3 w-3 animate-spin" /> : <RefreshCw className="h-3 w-3" />}
              </Button>
            </div>

            {isLoading ? (
              <div className="flex items-center justify-center p-4 text-muted-foreground">
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥...
              </div>
            ) : currentCommands.length > 0 ? (
              <div className="space-y-2">
                {currentCommands.map((cmd, index) => (
                  <div key={index} className="flex justify-between items-center p-3 bg-muted rounded-lg">
                    <div className="flex items-center gap-3">
                      <Badge variant="secondary" className="font-mono">
                        /{cmd.command}
                      </Badge>
                      <span className="text-sm">{cmd.description}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center p-4 text-muted-foreground bg-muted/50 rounded-lg">
                –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
              </div>
            )}
          </div>

          <Separator />

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
          <div className="space-y-4">
            <h4 className="font-semibold flex items-center gap-2">
              <Settings className="h-4 w-4" />
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
            </h4>

            <div className="grid gap-3 sm:grid-cols-2">
              <Button
                variant="destructive"
                onClick={deleteAllCommands}
                disabled={isDeleting || isUpdating}
                className="w-full"
              >
                {isDeleting ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    –£–¥–∞–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <Trash2 className="mr-2 h-4 w-4" />
                    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
                  </>
                )}
              </Button>

              <Button
                variant="outline"
                onClick={() => setCommands(true)}
                disabled={isUpdating || isDeleting}
                className="w-full"
              >
                {isUpdating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <Bot className="mr-2 h-4 w-4" />
                    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                  </>
                )}
              </Button>
            </div>
          </div>

          <Separator />

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold flex items-center gap-2">
                <Plus className="h-4 w-4" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
              </h4>
              <Button variant="ghost" size="sm" onClick={resetToDefault}>
                –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
              </Button>
            </div>

            <div className="space-y-2">
              <Label htmlFor="commands-json">JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥</Label>
              <Textarea
                id="commands-json"
                value={customCommands}
                onChange={(e) => setCustomCommands(e.target.value)}
                rows={12}
                className="font-mono text-sm"
                placeholder="–í–≤–µ–¥–∏—Ç–µ JSON –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥..."
              />
              <p className="text-xs text-muted-foreground">
                –§–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ "command" –∏ "description"
              </p>
            </div>

            <div className="grid gap-3 sm:grid-cols-2">
              <Button onClick={() => setCommands(false)} disabled={isUpdating || isDeleting} className="w-full">
                {isUpdating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    –£—Å—Ç–∞–Ω–æ–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <CheckCircle className="mr-2 h-4 w-4" />
                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
                  </>
                )}
              </Button>

              <Button
                variant="outline"
                onClick={() => setCommands(true)}
                disabled={isUpdating || isDeleting}
                className="w-full"
              >
                {isUpdating ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    –£—Å—Ç–∞–Ω–æ–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <Settings className="mr-2 h-4 w-4" />
                    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          {result && (
            <Alert variant={result.success ? "default" : "destructive"}>
              {result.success ? <CheckCircle className="h-4 w-4" /> : <AlertCircle className="h-4 w-4" />}
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <span>{result.message}</span>
                  <Badge variant="outline" className="text-xs">
                    {result.type}
                  </Badge>
                </div>
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
