"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { AlertTriangle, RefreshCw, Wrench, Eye } from "lucide-react"

export default function WebhookDiagnostics() {
  const [diagnostics, setDiagnostics] = useState<any>(null)
  const [isChecking, setIsChecking] = useState(false)
  const [isFixing, setIsFixing] = useState(false)
  const [fixResult, setFixResult] = useState<any>(null)

  const runDiagnostics = async () => {
    setIsChecking(true)
    try {
      const response = await fetch("/api/webhook-diagnostics")
      const result = await response.json()
      setDiagnostics(result)
    } catch (error) {
      console.error("Error running diagnostics:", error)
    } finally {
      setIsChecking(false)
    }
  }

  const fixWebhook = async () => {
    setIsFixing(true)
    setFixResult(null)

    try {
      const response = await fetch("/api/webhook-diagnostics", {
        method: "POST",
      })
      const result = await response.json()
      setFixResult(result)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        runDiagnostics()
      }, 2000)
    } catch (error) {
      setFixResult({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ webhook",
      })
    } finally {
      setIsFixing(false)
    }
  }

  return (
    <Card className="border-red-200 bg-red-50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-red-800">
          <AlertTriangle className="h-5 w-5" />üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook URL
        </CardTitle>
        <CardDescription className="text-red-700">–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å callback query</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex gap-2">
          <Button onClick={runDiagnostics} disabled={isChecking} size="sm" variant="outline">
            {isChecking ? (
              <>
                <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...
              </>
            ) : (
              <>
                <Eye className="h-3 w-3 mr-1" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
              </>
            )}
          </Button>

          <Button onClick={fixWebhook} disabled={isFixing} size="sm" className="bg-red-600 hover:bg-red-700">
            {isFixing ? (
              <>
                <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                <Wrench className="h-3 w-3 mr-1" />üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–ò–¢–¨
              </>
            )}
          </Button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
        {diagnostics && (
          <div className="space-y-3">
            <div className="text-sm font-medium">üìä –†–µ–∑—ÉÔøΩÔøΩ—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</div>

            <div className="grid gap-2 text-xs">
              <div className="flex justify-between items-center">
                <span>–¢–µ–∫—É—â–∏–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</span>
                <Badge variant="outline" className="bg-blue-100">
                  {diagnostics.current_app_url?.replace("https://", "")}
                </Badge>
              </div>

              <div className="flex justify-between items-center">
                <span>–û–∂–∏–¥–∞–µ–º—ã–π webhook:</span>
                <Badge variant="outline" className="bg-green-100">
                  {diagnostics.expected_webhook_url?.replace(diagnostics.current_app_url, "")}
                </Badge>
              </div>

              <div className="flex justify-between items-center">
                <span>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π webhook:</span>
                <Badge variant="outline" className={diagnostics.webhook_matches ? "bg-green-100" : "bg-red-100"}>
                  {diagnostics.actual_webhook_info?.url?.replace("https://", "") || "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                </Badge>
              </div>

              <div className="flex justify-between items-center">
                <span>–°—Ç–∞—Ç—É—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</span>
                {diagnostics.webhook_matches ? (
                  <Badge className="bg-green-600">‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç</Badge>
                ) : (
                  <Badge variant="destructive">‚ùå –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç</Badge>
                )}
              </div>
            </div>

            {/* –î–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è */}
            <details className="text-xs">
              <summary className="cursor-pointer font-medium">üîç –î–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è</summary>
              <div className="mt-2 space-y-1 ml-4">
                <div>NODE_ENV: {diagnostics.environment.NODE_ENV}</div>
                <div>VERCEL_URL: {diagnostics.environment.VERCEL_URL}</div>
                <div>VERCEL_BRANCH_URL: {diagnostics.environment.VERCEL_BRANCH_URL || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}</div>
                <div>
                  VERCEL_PROJECT_PRODUCTION_URL:{" "}
                  {diagnostics.environment.VERCEL_PROJECT_PRODUCTION_URL || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                </div>
              </div>
            </details>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        {fixResult && (
          <Alert className={fixResult.success ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"}>
            <AlertDescription className={fixResult.success ? "text-green-800" : "text-red-800"}>
              {fixResult.success ? (
                <div>
                  ‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!
                  <div className="text-xs mt-1">–ù–æ–≤—ã–π URL: {fixResult.final_webhook_info?.url}</div>
                </div>
              ) : (
                <div>‚ùå –û—à–∏–±–∫–∞: {fixResult.error}</div>
              )}
            </AlertDescription>
          </Alert>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <div className="text-sm font-medium text-yellow-800 mb-2">üéØ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</div>
          <ol className="text-xs text-yellow-700 space-y-1 ml-4">
            <li>1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É" - —É–≤–∏–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É</li>
            <li>2. –ù–∞–∂–º–∏—Ç–µ "üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–ò–¢–¨" - –∏—Å–ø—Ä–∞–≤–∏—Ç webhook</li>
            <li>3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç callback - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å</li>
            <li>4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è callback_query</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  )
}
