"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { CheckCircle, RefreshCw, Zap, ExternalLink } from "lucide-react"

export default function WebhookSuccessFix() {
  const [isRestoring, setIsRestoring] = useState(false)
  const [restoreResult, setRestoreResult] = useState<any>(null)

  const restoreWorkingWebhook = async () => {
    setIsRestoring(true)
    setRestoreResult(null)
    try {
      const response = await fetch("/api/restore-working-webhook", {
        method: "POST",
      })
      const data = await response.json()
      setRestoreResult(data)
    } catch (error) {
      setRestoreResult({
        success: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ webhook",
      })
    } finally {
      setIsRestoring(false)
    }
  }

  return (
    <Card className="border-green-200 bg-green-50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-green-700">
          <CheckCircle className="h-5 w-5" />üéâ Debug webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!
        </CardTitle>
        <CardDescription>
          Callback query —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–π webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <Alert>
          <CheckCircle className="h-4 w-4" />
          <AlertDescription>
            <strong>‚úÖ –û—Ç–ª–∏—á–Ω–æ!</strong> –í–∞—à–∏ –ª–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ:
            <ul className="list-disc list-inside mt-2 space-y-1 text-sm">
              <li>Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç callback_query –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä</li>
              <li>
                –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: <code>confirm_28</code>
              </li>
              <li>
                User ID: <code>959905827</code>
              </li>
              <li>–ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, —á—Ç–æ debug webhook –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ</li>
            </ul>
          </AlertDescription>
        </Alert>

        <Button
          onClick={restoreWorkingWebhook}
          disabled={isRestoring}
          className="w-full bg-green-600 hover:bg-green-700"
          size="lg"
        >
          {isRestoring ? (
            <>
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ webhook...
            </>
          ) : (
            <>
              <Zap className="mr-2 h-4 w-4" />
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π webhook
            </>
          )}
        </Button>

        {restoreResult && (
          <Alert variant={restoreResult.success ? "default" : "destructive"}>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              <div className="space-y-2">
                <p>
                  <strong>{restoreResult.success ? "‚úÖ –£—Å–ø–µ—Ö!" : "‚ùå –û—à–∏–±–∫–∞!"}</strong>
                </p>
                <p>{restoreResult.message || restoreResult.error}</p>

                {restoreResult.webhook_url && (
                  <div className="text-xs">
                    <strong>Webhook URL:</strong> {restoreResult.webhook_url}
                  </div>
                )}

                {restoreResult.next_steps && (
                  <div>
                    <strong>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong>
                    <ol className="list-decimal list-inside text-sm mt-1">
                      {restoreResult.next_steps.map((step: string, index: number) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                  </div>
                )}
              </div>
            </AlertDescription>
          </Alert>
        )}

        <div className="border-t pt-4">
          <h4 className="font-semibold mb-2 text-sm">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</h4>
          <div className="space-y-2 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-3 w-3 text-green-600" />
              <span>Webhook –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ /webhook/telegram</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="h-3 w-3 text-green-600" />
              <span>–ö–Ω–æ–ø–∫–∏ –Ω–∞—á–Ω—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="h-3 w-3 text-green-600" />
              <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="h-3 w-3 text-green-600" />
              <span>–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</span>
            </div>
          </div>
        </div>

        <Alert>
          <CheckCircle className="h-4 w-4" />
          <AlertDescription>
            <strong>–¢–µ—Å—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</strong>
            <ol className="list-decimal list-inside mt-2 text-sm">
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π webhook"</li>
              <li>–î–æ–∂–¥–∏—Ç–µ—Å—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</li>
              <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –≤ –±–æ—Ç–µ</li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"</li>
            </ol>
          </AlertDescription>
        </Alert>

        <div className="flex gap-2">
          <Button variant="outline" size="sm" asChild>
            <a href="https://vercel.com/dashboard" target="_blank" rel="noopener noreferrer">
              <ExternalLink className="h-3 w-3 mr-1" />
              Vercel Logs
            </a>
          </Button>
          <Button variant="outline" size="sm" asChild>
            <a
              href={`https://t.me/${process.env.NEXT_PUBLIC_BOT_USERNAME || "yourbotname"}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <ExternalLink className="h-3 w-3 mr-1" />
              –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
            </a>
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
