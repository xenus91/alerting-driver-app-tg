import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface Point {
  point_id: string
  point_name: string
  adress?: string
  door_open_1?: string
  door_open_2?: string
  door_open_3?: string
  latitude?: number
  longitude?: number
  point_num?: number
}

interface Trip {
  trip_identifier: string
  vehicle_number: string
  planned_loading_time: string
  driver_comment?: string
  loading_points: Point[]
  unloading_points: Point[]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export function normalizePhoneNumber(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  const digits = phone.replace(/\D/g, "")

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (digits.startsWith("8") && digits.length === 11) {
    return "7" + digits.slice(1)
  }

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (digits.startsWith("7") && digits.length === 11) {
    return digits
  }

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–º–µ–µ—Ç 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
  if (digits.length === 10) {
    return "7" + digits
  }

  // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  return digits
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL –º–∞—Ä—à—Ä—É—Ç–∞
function buildRouteUrl(points: Point[]): string | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  const validPoints = points.filter((point) => point.latitude && point.longitude)

  if (validPoints.length !== points.length || validPoints.length === 0) {
    console.log("Not all points have coordinates, skipping route building")
    return null
  }

  const coordinates = validPoints.map((point) => `${point.longitude},${point.latitude}`).join("~")

  return `https://yandex.ru/maps/?rtext=${coordinates}&rtt=auto`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ–π—Å–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
export async function sendMultipleTripMessageWithButtons(
  telegramId: number,
  trips: Trip[],
  driverName: string,
  messageId: number,
  isCorrection = false,
  isResend = false,
  previousTelegramMessageId?: number | null,
): Promise<{ message_id: number; messageText: string }> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN is not set")
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥—Ä—É–∑–∫–∏
  const sortedTrips = trips.sort(
    (a, b) => new Date(a.planned_loading_time).getTime() - new Date(b.planned_loading_time).getTime(),
  )

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = ""

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
  if (isCorrection) {
    message += `üîÑ <b>–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –†–ï–ô–°–û–í</b>\n\n`
  } else if (isResend) {
    message += `üîÑ <b>–ü–û–í–¢–û–†–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ó–ê–Ø–í–û–ö</b>\n\n`
  }

  message += `–ü—Ä–∏–≤–µ—Ç, ${driverName}! üëã\n\n`

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã
  sortedTrips.forEach((trip, tripIndex) => {
    const tripNumber = tripIndex + 1
    const loadingTime = new Date(trip.planned_loading_time).toLocaleString("ru-RU", {
      day: "numeric",
      month: "long",
      hour: "2-digit",
      minute: "2-digit",
      timeZone: "Europe/Moscow",
    })

    message += `<b>–†–µ–π—Å ${tripNumber}:</b>\n`
    message += `üöõ <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</b> ${trip.trip_identifier}\n`
    message += `üöó <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b> ${trip.vehicle_number}\n`
    message += `‚è∞ <b>–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏:</b> ${loadingTime}\n`

    if (trip.driver_comment) {
      message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${trip.driver_comment}\n`
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ point_num
    const allPoints: (Point & { point_type: string })[] = [
      ...trip.loading_points.map((p) => ({ ...p, point_type: "P" })),
      ...trip.unloading_points.map((p) => ({ ...p, point_type: "D" })),
    ]

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ point_num
    allPoints.sort((a, b) => (a.point_num || 0) - (b.point_num || 0))

    if (allPoints.length > 0) {
      message += `\nüìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>\n`

      allPoints.forEach((point, index) => {
        const pointNumber = index + 1
        const pointType = point.point_type === "P" ? "–ü–æ–≥—Ä—É–∑–∫–∞" : "–†–∞–∑–≥—Ä—É–∑–∫–∞"
        const pointIcon = point.point_type === "P" ? "üì¶" : "üì§"

        message += `${pointNumber}) ${pointIcon} ${point.point_id} ${point.point_name} (${pointType})\n`

        if (point.adress) {
          message += `    üìç ${point.adress}\n`
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–∞—Ö –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è —Ç–æ—á–µ–∫ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        if (point.point_type === "D") {
          const doorTimes = [point.door_open_1, point.door_open_2, point.door_open_3]
            .filter((time) => time && time.trim() !== "")
            .join(" | ")

          if (doorTimes) {
            message += `    üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: ${doorTimes}\n`
          }
        }
      })

      // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      const routeUrl = buildRouteUrl(allPoints)
      if (routeUrl) {
        message += `\nüó∫ <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n`
      }
    }

    message += `\n`
  })

  message += `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:`

  // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `confirm_${messageId}` },
        { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline_${messageId}` },
      ],
    ],
  }

  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (previousTelegramMessageId) {
      try {
        await fetch(`https://api.telegram.org/bot${botToken}/deleteMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: telegramId,
            message_id: previousTelegramMessageId,
          }),
        })
        console.log(`Deleted previous message ${previousTelegramMessageId}`)
      } catch (deleteError) {
        console.log(`Could not delete previous message: ${deleteError}`)
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "HTML",
        reply_markup: keyboard,
        disable_web_page_preview: true,
      }),
    })

    const result = await response.json()

    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`)
    }

    console.log(`Message sent successfully to ${telegramId}, message_id: ${result.result.message_id}`)

    return {
      message_id: result.result.message_id,
      messageText: message,
    }
  } catch (error) {
    console.error("Error sending message:", error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function sendTelegramMessage(telegramId: number, message: string): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN is not set")
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const result = await response.json()

    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`)
    }

    console.log(`Simple message sent successfully to ${telegramId}`)
  } catch (error) {
    console.error("Error sending simple message:", error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function editTelegramMessage(telegramId: number, messageId: number, newText: string): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN is not set")
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/editMessageText`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        message_id: messageId,
        text: newText,
        parse_mode: "HTML",
      }),
    })

    const result = await response.json()

    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`)
    }

    console.log(`Message edited successfully: ${telegramId}/${messageId}`)
  } catch (error) {
    console.error("Error editing message:", error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function deleteTelegramMessage(telegramId: number, messageId: number): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN is not set")
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/deleteMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        message_id: messageId,
      }),
    })

    const result = await response.json()

    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`)
    }

    console.log(`Message deleted successfully: ${telegramId}/${messageId}`)
  } catch (error) {
    console.error("Error deleting message:", error)
    throw error
  }
}
