const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

export interface TelegramMessage {
  message_id: number
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  chat: {
    id: number
    type: string
  }
  text?: string
  contact?: {
    phone_number: string
    first_name: string
    last_name?: string
  }
}

export interface TelegramCallbackQuery {
  id: string
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  message?: TelegramMessage
  data?: string
}

export interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

export async function sendReplyToMessage(chatId: number, replyToMessageId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      reply_to_message_id: replyToMessageId,
    }

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send reply message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending reply message:", error)
    await sendMessage(chatId, text)
    throw error
  }
}

export async function sendMessage(chatId: number, text: string) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

export async function editMessageReplyMarkup(chatId: number, messageId: number, replyMarkup?: any) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  console.log("=== EDITING MESSAGE REPLY MARKUP ===")
  console.log("Chat ID:", chatId)
  console.log("Message ID:", messageId)
  console.log("New reply markup:", JSON.stringify(replyMarkup, null, 2))

  try {
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: replyMarkup,
    }

    const response = await fetch(`${TELEGRAM_API_URL}/editMessageReplyMarkup`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    const data = await response.json()
    console.log("editMessageReplyMarkup response:", JSON.stringify(data, null, 2))

    if (!data.ok) {
      console.error("Failed to edit message reply markup:", data.description)
      return null
    }

    console.log("=== MESSAGE REPLY MARKUP EDITED SUCCESSFULLY ===")
    return data.result
  } catch (error) {
    console.error("Error editing message reply markup:", error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
function buildRouteUrl(points: Array<{ latitude?: number | string; longitude?: number | string }>) {
  const validPoints = points.filter((p) => {
    const lat = typeof p.latitude === "string" ? Number.parseFloat(p.latitude) : p.latitude
    const lng = typeof p.longitude === "string" ? Number.parseFloat(p.longitude) : p.longitude
    return lat && lng && !isNaN(lat) && !isNaN(lng)
  })

  if (validPoints.length < 2) {
    console.log(`Not enough valid points for route: ${validPoints.length}`)
    return null // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  }

  const coordinates = validPoints
    .map((p) => {
      const lat = typeof p.latitude === "string" ? Number.parseFloat(p.latitude) : p.latitude
      const lng = typeof p.longitude === "string" ? Number.parseFloat(p.longitude) : p.longitude
      return `${lat},${lng}`
    })
    .join("~")

  const url = `https://yandex.ru/maps/?mode=routes&rtt=auto&rtext=${coordinates}&utm_source=ymaps_app_redirect`
  console.log(`Built route URL: ${url}`)
  return url
}

export async function sendContactRequest(chatId: number) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup: {
          keyboard: [
            [
              {
                text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
                request_contact: true,
              },
            ],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send contact request")
    }

    return data.result
  } catch (error) {
    console.error("Error sending contact request:", error)
    throw error
  }
}

export async function sendMultipleTripMessageWithButtons(
  chatId: number,
  trips: Array<{
    trip_identifier: string
    vehicle_number: string
    planned_loading_time: string
    driver_comment: string
    loading_points: Array<{
      point_id: string
      point_name: string
      door_open_1?: string
      door_open_2?: string
      door_open_3?: string
      latitude?: number | string
      longitude?: number | string
      adress?: string
    }>
    unloading_points: Array<{
      point_id: string
      point_name: string
      door_open_1?: string
      door_open_2?: string
      door_open_3?: string
      latitude?: number | string
      longitude?: number | string
      adress?: string // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
    }>
  }>,
  firstName: string,
  messageId: number,
  isCorrection = false,
  // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
  // –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä isResend –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  isResend = false,
  // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
  previousTelegramMessageId?: number,
): Promise<{ message_id: number; messageText: string }> {
  try {
    console.log(`=== SENDING MULTIPLE TRIP MESSAGE ===`)
    console.log(`Chat ID: ${chatId}, Trips count: ${trips.length}, Is correction: ${isCorrection}`)
    console.log(`Previous Telegram Message ID: ${previousTelegramMessageId || "None"}`)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let message = ""

    // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —à–∞–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isCorrection) {
      message += `üîÑ <b>–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –†–ï–ô–°–û–í</b>\n\n`
    } else if (isResend) {
      message += `üîÑ <b>–ü–û–í–¢–û–†–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ó–ê–Ø–í–û–ö</b>\n\n`
    }
    // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

    message += `üåÖ <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>\n\n`
    message += `üë§ –£–≤–∞–∂–∞–µ–º—ã–π, <b>${firstName}</b>\n\n`

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    const isMultiple = trips.length > 1
    message += `üöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω${isMultiple ? "—ã" : ""} <b>${trips.length} —Ä–µ–π—Å${trips.length > 1 ? "–∞" : ""}:</b>\n\n`

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥—Ä—É–∑–∫–∏
    const sortedTrips = [...trips].sort((a, b) => {
      const timeA = new Date(a.planned_loading_time || "").getTime()
      const timeB = new Date(b.planned_loading_time || "").getTime()
      return timeA - timeB
    })

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã
    sortedTrips.forEach((trip, tripIndex) => {
      console.log(`Processing trip ${tripIndex + 1}: ${trip.trip_identifier}`)

      message += `<b>–†–µ–π—Å ${tripIndex + 1}:</b>\n`
      message += `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: <b>${trip.trip_identifier}</b>\n`
      message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>${trip.vehicle_number}</b>\n`

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ë–ï–ó —Å–º–µ—â–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
      const formatDateTime = (dateTimeString: string): string => {
        try {
          if (!dateTimeString) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

          const date = new Date(dateTimeString)
          if (isNaN(date.getTime())) return dateTimeString

          const day = date.getDate()
          const monthNames = [
            "—è–Ω–≤–∞—Ä—è",
            "—Ñ–µ–≤—Ä–∞–ª—è",
            "–º–∞—Ä—Ç–∞",
            "–∞–ø—Ä–µ–ª—è",
            "–º–∞—è",
            "–∏—é–Ω—è",
            "–∏—é–ª—è",
            "–∞–≤–≥—É—Å—Ç–∞",
            "—Å–µ–Ω—Ç—è–±—Ä—è",
            "–æ–∫—Ç—è–±—Ä—è",
            "–Ω–æ—è–±—Ä—è",
            "–¥–µ–∫–∞–±—Ä—è",
          ]
          const month = monthNames[date.getMonth()]

          const hours = date.getHours().toString().padStart(2, "0")
          const minutes = date.getMinutes().toString().padStart(2, "0")
          const time = `${hours}:${minutes}`

          return `${day} ${month} ${time}`
        } catch (error) {
          console.error("Error formatting date:", error)
          return dateTimeString
        }
      }

      message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: <b>${formatDateTime(trip.planned_loading_time)}</b>\n\n`

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ point_num
      const allPoints = [
        ...trip.loading_points.map((p) => ({ ...p, type: "P" })),
        ...trip.unloading_points.map((p) => ({ ...p, type: "D" })),
      ].sort((a, b) => {
        const numA = Number.parseInt(a.point_id) || 0
        const numB = Number.parseInt(b.point_id) || 0
        return numA - numB
      })

      if (allPoints.length > 0) {
        message += `üìç <b>–ü—É–Ω–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n`
        allPoints.forEach((point, index) => {
          const typeIcon = point.type === "P" ? "üì¶" : "üì§"
          const typeText = point.type === "P" ? "–ü–æ–≥—Ä—É–∑–∫–∞" : "–†–∞–∑–≥—Ä—É–∑–∫–∞"

          message += `${index + 1}) ${typeIcon} <b>${point.point_id} ${point.point_name}</b> (${typeText})\n`

          // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
          if (point.adress) {
            if (point.latitude && point.longitude) {
              const lat = typeof point.latitude === "string" ? point.latitude : String(point.latitude)
              const lng = typeof point.longitude === "string" ? point.longitude : String(point.longitude)
              const mapUrl = `https://yandex.ru/maps/?pt=${lng},${lat}&z=16&l=map`
              message += `   üìç <a href="${mapUrl}">${point.adress}</a>\n`
            } else {
              message += `   üìç ${point.adress}\n`
            }
          }

          // –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏)
          if (point.type === "D") {
            const windows = [point.door_open_1, point.door_open_2, point.door_open_3].filter((w) => w && w.trim())
            if (windows.length > 0) {
              message += `   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: <code>${windows.join(" | ")}</code>\n`
            }
          }
        })
        message += `\n`
      }

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (trip.driver_comment && trip.driver_comment.trim()) {
        message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:</b>\n<i>${trip.driver_comment}</i>\n\n`
      }

      // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
      const routePoints = [...trip.loading_points, ...trip.unloading_points]
      console.log(
        `Route points for trip ${trip.trip_identifier}:`,
        routePoints.map((p) => ({ id: p.point_id, lat: p.latitude, lng: p.longitude })),
      )

      const routeUrl = buildRouteUrl(routePoints)

      if (routeUrl) {
        message += `üó∫Ô∏è <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n`
        console.log(`Added route URL for trip ${trip.trip_identifier}`)
      } else {
        console.log(`No route URL generated for trip ${trip.trip_identifier} - insufficient coordinates`)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (tripIndex < sortedTrips.length - 1) {
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`
      }
    })

    message += `üôè <b>–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å${isMultiple ? "—ã" : ""}</b>`

    console.log(`Final message length: ${message.length}`)
    console.log(`Message preview: ${message.substring(0, 200)}...`)

    // –ï—Å–ª–∏ –µ—Å—Ç—å previousTelegramMessageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (previousTelegramMessageId) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–∞—á–µ—Ä–∫–∏–≤–∞–µ–º)
        const strikethroughMessage = `<s>–£—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.</s>`

        const editResponse = await fetch(`${TELEGRAM_API_URL}/editMessageText`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            message_id: previousTelegramMessageId,
            text: strikethroughMessage,
            parse_mode: "HTML",
            reply_markup: {}, // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø—É—Å—Ç–æ–π reply_markup
          }),
        })

        const editData = await editResponse.json()
        if (!editData.ok) {
          console.error(`Failed to edit message ${previousTelegramMessageId}:`, editData.description)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        } else {
          console.log(`Successfully edited message ${previousTelegramMessageId} to strikethrough and removed buttons`)
        }
      } catch (error) {
        console.error(`Error editing message ${previousTelegramMessageId}:`, error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send multiple trip message with buttons")
    }

    console.log(`Message sent successfully, message_id: ${data.result.message_id}`)
    return { message_id: data.result.message_id, messageText: message }
  } catch (error) {
    console.error("Error sending multiple trip message with buttons:", error)
    throw error
  }
}

export async function sendTripMessageWithButtons(
  chatId: number,
  tripData: {
    trip_identifier: string
    vehicle_number: string
    planned_loading_time: string
    driver_comment: string
  },
  loadingPoints: Array<{
    point_name: string
    door_open_1?: string
    door_open_2?: string
    door_open_3?: string
    latitude?: number | string
    longitude?: number | string
  }>,
  unloadingPoints: Array<{
    point_name: string
    door_open_1?: string
    door_open_2?: string
    door_open_3?: string
    latitude?: number | string
    longitude?: number | string
  }>,
  firstName: string,
  messageId: number,
) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üåÖ <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>

`
    message += `üë§ –£–≤–∞–∂–∞–µ–º—ã–π, <b>${firstName}</b>

`
    message += `üöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ä–µ–π—Å <b>${tripData.trip_identifier}</b>
`
    message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>${tripData.vehicle_number}</b>
`
    message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: <b>${tripData.planned_loading_time}</b>

`

    // –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏
    if (loadingPoints.length > 0) {
      message += `üì¶ <b>–ü–æ–≥—Ä—É–∑–∫–∞:</b>
`
      loadingPoints.forEach((point, index) => {
        message += `${index + 1}) <b>${point.point_name}</b>
`
      })
      message += `
`
    }

    // –ü—É–Ω–∫—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    if (unloadingPoints.length > 0) {
      message += `üì§ <b>–†–∞–∑–≥—Ä—É–∑–∫–∞:</b>
`
      unloadingPoints.forEach((point, index) => {
        message += `${index + 1}) <b>${point.point_name}</b>
`

        // –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        const windows = [point.door_open_1, point.door_open_2, point.door_open_3].filter((w) => w && w.trim())
        if (windows.length > 0) {
          message += `   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: <code>${windows.join(" | ")}</code>
`
        }
        message += `
`
      })
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (tripData.driver_comment && tripData.driver_comment.trim()) {
      message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:</b>
<i>${tripData.driver_comment}</i>

`
    }

    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç: —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ç–æ—á–∫–∏ –ø–æ–≥—Ä—É–∑–∫–∏, –ø–æ—Ç–æ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    const routePoints = [...loadingPoints, ...unloadingPoints]
    const routeUrl = buildRouteUrl(routePoints)

    if (routeUrl) {
      message += `üó∫Ô∏è <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>

`
    }

    message += `üôè <b>–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å</b>`

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send trip message with buttons")
    }

    return data.result
  } catch (error) {
    console.error("Error sending trip message with buttons:", error)
    throw error
  }
}

export async function sendMessageWithButtons(chatId: number, text: string, messageId: number) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message with buttons")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message with buttons:", error)
    throw error
  }
}

export async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to answer callback query")
    }

    return data.result
  } catch (error) {
    console.error("Error answering callback query:", error)
    throw error
  }
}

export async function sendTelegramMessage(chatId: number, text: string, messageId?: number) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: messageId
          ? {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data: `confirm_${messageId}`,
                  },
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_${messageId}`,
                  },
                ],
              ],
            }
          : undefined,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

export async function setWebhook(webhookUrl: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/setWebhook`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        url: webhookUrl,
      }),
    })

    const data = await response.json()
    return data
  } catch (error) {
    console.error("Error setting webhook:", error)
    throw error
  }
}

export async function deleteMessage(chatId: number, messageId: number) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/deleteMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      console.warn(`Failed to delete message ${messageId} in chat ${chatId}:`, data.description)
      return false
    }

    console.log(`Successfully deleted message ${messageId} in chat ${chatId}`)
    return true
  } catch (error) {
    console.error("Error deleting Telegram message:", error)
    return false
  }
}
