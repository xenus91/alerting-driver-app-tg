const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

export interface TelegramMessage {
  message_id: number
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  chat: {
    id: number
    type: string
  }
  text?: string
  contact?: {
    phone_number: string
    first_name: string
    last_name?: string
  }
}

export interface TelegramCallbackQuery {
  id: string
  from: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  message?: TelegramMessage
  data?: string
}

export interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

export async function sendMessage(chatId: number, text: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
function buildRouteUrl(points: Array<{ latitude?: number; longitude?: number }>) {
  const validPoints = points.filter((p) => p.latitude && p.longitude)

  if (validPoints.length < 2) {
    return null // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  }

  const coordinates = validPoints.map((p) => `${p.latitude},${p.longitude}`).join("~")
  return `https://yandex.ru/maps/?mode=routes&rtt=auto&rtext=${coordinates}&utm_source=ymaps_app_redirect`
}

export async function sendTripMessageWithButtons(
  chatId: number,
  tripData: {
    trip_identifier: string
    vehicle_number: string
    planned_loading_time: string
    driver_comment: string
  },
  loadingPoints: Array<{
    point_name: string
    door_open_1?: string
    door_open_2?: string
    door_open_3?: string
    latitude?: number
    longitude?: number
  }>,
  unloadingPoints: Array<{
    point_name: string
    door_open_1?: string
    door_open_2?: string
    door_open_3?: string
    latitude?: number
    longitude?: number
  }>,
  firstName: string,
  messageId: number,
) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üåÖ <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>\n\n`
    message += `üë§ –£–≤–∞–∂–∞–µ–º—ã–π, <b>${firstName}</b>\n\n`
    message += `üöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ä–µ–π—Å <b>${tripData.trip_identifier}</b>\n`
    message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>${tripData.vehicle_number}</b>\n`
    message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: <b>${tripData.planned_loading_time}</b>\n\n`

    // –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏
    if (loadingPoints.length > 0) {
      message += `üì¶ <b>–ü–æ–≥—Ä—É–∑–∫–∞:</b>\n`
      loadingPoints.forEach((point, index) => {
        message += `${index + 1}) <b>${point.point_name}</b>\n`
      })
      message += `\n`
    }

    // –ü—É–Ω–∫—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    if (unloadingPoints.length > 0) {
      message += `üì§ <b>–†–∞–∑–≥—Ä—É–∑–∫–∞:</b>\n`
      unloadingPoints.forEach((point, index) => {
        message += `${index + 1}) <b>${point.point_name}</b>\n`

        // –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        const windows = [point.door_open_1, point.door_open_2, point.door_open_3].filter((w) => w && w.trim())
        if (windows.length > 0) {
          message += `   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: <code>${windows.join(" | ")}</code>\n`
        }
        message += `\n`
      })
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (tripData.driver_comment && tripData.driver_comment.trim()) {
      message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:</b>\n<i>${tripData.driver_comment}</i>\n\n`
    }

    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç: —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ç–æ—á–∫–∏ –ø–æ–≥—Ä—É–∑–∫–∏, –ø–æ—Ç–æ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    const routePoints = [...loadingPoints, ...unloadingPoints]
    const routeUrl = buildRouteUrl(routePoints)

    if (routeUrl) {
      message += `üó∫Ô∏è <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n`
    }

    message += `üôè <b>–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å</b>`

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send trip message with buttons")
    }

    return data.result
  } catch (error) {
    console.error("Error sending trip message with buttons:", error)
    throw error
  }
}

export async function sendMultipleTripMessageWithButtons(
  chatId: number,
  trips: Array<{
    trip_identifier: string
    vehicle_number: string
    planned_loading_time: string
    driver_comment: string
    loading_points: Array<{
      point_id: string
      point_name: string
      door_open_1?: string
      door_open_2?: string
      door_open_3?: string
      latitude?: number
      longitude?: number
    }>
    unloading_points: Array<{
      point_id: string
      point_name: string
      door_open_1?: string
      door_open_2?: string
      door_open_3?: string
      latitude?: number
      longitude?: number
    }>
  }>,
  firstName: string,
  messageId: number,
) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üåÖ <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>\n\n`
    message += `üë§ –£–≤–∞–∂–∞–µ–º—ã–π, <b>${firstName}</b>\n\n`

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    const isMultiple = trips.length > 1
    message += `üöõ –ù–∞ –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω${isMultiple ? "—ã" : ""} <b>${trips.length} —Ä–µ–π—Å${trips.length > 1 ? "–∞" : ""}:</b>\n\n`

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥—Ä—É–∑–∫–∏
    const sortedTrips = [...trips].sort((a, b) => {
      const timeA = new Date(a.planned_loading_time || "").getTime()
      const timeB = new Date(b.planned_loading_time || "").getTime()
      return timeA - timeB
    })

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã
    sortedTrips.forEach((trip, tripIndex) => {
      message += `<b>–†–µ–π—Å ${tripIndex + 1}:</b>\n`
      message += `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: <b>${trip.trip_identifier}</b>\n`
      message += `üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>${trip.vehicle_number}</b>\n`

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ë–ï–ó —Å–º–µ—â–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
      const formatDateTime = (dateTimeString: string): string => {
        try {
          if (!dateTimeString) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

          const date = new Date(dateTimeString)
          if (isNaN(date.getTime())) return dateTimeString

          const day = date.getDate()
          const monthNames = [
            "—è–Ω–≤–∞—Ä—è",
            "—Ñ–µ–≤—Ä–∞–ª—è",
            "–º–∞—Ä—Ç–∞",
            "–∞–ø—Ä–µ–ª—è",
            "–º–∞—è",
            "–∏—é–Ω—è",
            "–∏—é–ª—è",
            "–∞–≤–≥—É—Å—Ç–∞",
            "—Å–µ–Ω—Ç—è–±—Ä—è",
            "–æ–∫—Ç—è–±—Ä—è",
            "–Ω–æ—è–±—Ä—è",
            "–¥–µ–∫–∞–±—Ä—è",
          ]
          const month = monthNames[date.getMonth()]

          // –£–±–∏—Ä–∞–µ–º timeZone: "Europe/Moscow" —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–º–µ—â–µ–Ω–∏—è
          const hours = date.getHours().toString().padStart(2, "0")
          const minutes = date.getMinutes().toString().padStart(2, "0")
          const time = `${hours}:${minutes}`

          return `${day} ${month} ${time}`
        } catch (error) {
          console.error("Error formatting date:", error)
          return dateTimeString
        }
      }

      message += `‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: <b>${formatDateTime(trip.planned_loading_time)}</b>\n\n`

      // –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏
      if (trip.loading_points.length > 0) {
        message += `üì¶ <b>–ü–æ–≥—Ä—É–∑–∫–∞:</b>\n`
        trip.loading_points.forEach((point, index) => {
          message += `${index + 1}) <b>${point.point_id} ${point.point_name}</b>\n`
        })
        message += `\n`
      }

      // –ü—É–Ω–∫—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏
      if (trip.unloading_points.length > 0) {
        message += `üì§ <b>–†–∞–∑–≥—Ä—É–∑–∫–∞:</b>\n`
        trip.unloading_points.forEach((point, index) => {
          message += `${index + 1}) <b>${point.point_id} ${point.point_name}</b>\n`

          // –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
          const windows = [point.door_open_1, point.door_open_2, point.door_open_3].filter((w) => w && w.trim())
          if (windows.length > 0) {
            message += `   üïê –û–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏: <code>${windows.join(" | ")}</code>\n`
          }
        })
        message += `\n`
      }

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (trip.driver_comment && trip.driver_comment.trim()) {
        message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–π—Å—É:</b>\n<i>${trip.driver_comment}</i>\n\n`
      }

      // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Ç–æ—á–∫–∏ –ø–æ–≥—Ä—É–∑–∫–∏, –ø–æ—Ç–æ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
      const routePoints = [...trip.loading_points, ...trip.unloading_points]
      const routeUrl = buildRouteUrl(routePoints)

      if (routeUrl) {
        message += `üó∫Ô∏è <a href="${routeUrl}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n`
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (tripIndex < sortedTrips.length - 1) {
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`
      }
    })

    message += `üôè <b>–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–π—Å${isMultiple ? "—ã" : ""}</b>`

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send multiple trip message with buttons")
    }

    return data.result
  } catch (error) {
    console.error("Error sending multiple trip message with buttons:", error)
    throw error
  }
}

export async function sendMessageWithButtons(chatId: number, text: string, messageId: number) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data: `confirm_${messageId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `reject_${messageId}`,
              },
            ],
          ],
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message with buttons")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message with buttons:", error)
    throw error
  }
}

export async function sendContactRequest(chatId: number) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup: {
          keyboard: [
            [
              {
                text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
                request_contact: true,
              },
            ],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send contact request")
    }

    return data.result
  } catch (error) {
    console.error("Error sending contact request:", error)
    throw error
  }
}

export async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to answer callback query")
    }

    return data.result
  } catch (error) {
    console.error("Error answering callback query:", error)
    throw error
  }
}

export async function editMessageReplyMarkup(chatId: number, messageId: number, replyMarkup?: any) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/editMessageReplyMarkup`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        reply_markup: replyMarkup,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to edit message reply markup")
    }

    return data.result
  } catch (error) {
    console.error("Error editing message reply markup:", error)
    throw error
  }
}

export async function sendTelegramMessage(chatId: number, text: string, messageId?: number) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!
  const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: messageId
          ? {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data: `confirm_${messageId}`,
                  },
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_${messageId}`,
                  },
                ],
              ],
            }
          : undefined,
      }),
    })

    const data = await response.json()

    if (!data.ok) {
      throw new Error(data.description || "Failed to send message")
    }

    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

export async function setWebhook(webhookUrl: string) {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/setWebhook`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        url: webhookUrl,
      }),
    })

    const data = await response.json()
    return data
  } catch (error) {
    console.error("Error setting webhook:", error)
    throw error
  }
}
